<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SamuFlore&#39;s Dimension</title>
    <link>https://samuflore.top/</link>
    
    <atom:link href="https://samuflore.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一人倒、衆人倒。</description>
    <pubDate>Tue, 28 Oct 2025 15:53:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[CO P2]P2 上机之思考</title>
      <link>https://samuflore.top/posts/6d68c22/</link>
      <guid>https://samuflore.top/posts/6d68c22/</guid>
      <pubDate>Mon, 27 Oct 2025 15:36:32 GMT</pubDate>
      
      
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P2/">P2</category>
      
      <category domain="https://samuflore.top/tags/MIPS/">MIPS</category>
      
      
      <comments>https://samuflore.top/posts/6d68c22/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[八紘九野集]天津</title>
      <link>https://samuflore.top/posts/bf207952/</link>
      <guid>https://samuflore.top/posts/bf207952/</guid>
      <pubDate>Mon, 27 Oct 2025 15:34:24 GMT</pubDate>
      
      <description>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;530&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=2684510360&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
&lt;hr&gt;
&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/posts/bf207952/%E5%A4%A9%E6%B4%A5%E7%AB%99.webp&quot; alt=&quot;天津站&quot;&gt;&lt;/p&gt;
&lt;p&gt;写下这篇文章时，我已三度前往天津游玩，并筹划着 26 年海棠节再次拜访（溜&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="86" src="//music.163.com/outchain/player?type=2&id=2684510360&auto=1&height=66"></iframe><hr><h1 id="序">序</h1><p><img src="/posts/bf207952/%E5%A4%A9%E6%B4%A5%E7%AB%99.webp" alt="天津站"></p><p>写下这篇文章时，我已三度前往天津游玩，并筹划着 26 年海棠节再次拜访（溜</p><span id="more"></span><h1 id="走马观花">走马观花</h1><p>初次访津，是手忙脚乱地规划第一次周末出游，虽然因为突发的通知被迫提前回京，但对我来说意义倒是非凡的。</p><p>记得是某天 puq 看到好朋友看到好朋友<ins>姚卿</ins>周末的时候到天津玩了一圈回来，这才想起北京边上还有个天津的（），打开 12306 一查，竟然 30 分钟 50 块就能爽玩，岂不美哉！于是立刻下定决心要趁一个事情少的周末去玩一玩。</p><p>虽然前往天津目的无外乎是探探地图，找我的高中同学<ins>丁君</ins>叙叙旧，顺便到天大打个卡，但是却让我相当程度上从幼稚走向社会化。买票坐高铁倒不用说，订酒店办入住的确是头一回，规划入住和退房时间确实很头疼呢。另外就是乘地铁。当时还没试过用支付宝的出行服务，又不想为乘地铁专门下一个 app，就决定去售票机买票。出票的时候，我惊讶地发现天津地铁的票竟然和长沙地铁一样是硬币形状的，想必当时不会料到马上我就要给天津一份见面礼了吧（</p><p><img src="/posts/bf207952/%E5%8D%95%E7%A8%8B%E7%A5%A8.webp" alt="消失的它"></p><p>没错，第一次在天津坐地铁，出站的时候发现票没了（绷<br>好在由于到的时候是晚上，出站的时候地铁已经是末班车，工作人员估计急着下班没让我怎么样 www</p><p>既然是要拜访<ins>丁君</ins>，那必然是让他乖乖来天津站接人了。汇合之后，我们的第一站就是天大卫津路校区。</p><p><img src="/posts/bf207952/%E5%A4%A9%E5%A4%A7.webp" alt="天大"></p><div class="tips"><p>实则落地先买了个地地地道地地道道煎饼果子尝尝，和想象中有点出入，感觉没有我们南方魔改版好吃（bu</p></div><p>第一印象是真不错。门前一条河，一座桥。“北洋”两个字充满历史底蕴和力量，直接把我们 BUAA 按在地上摩擦。不过已经太晚，不好麻烦<ins>丁君</ins>带着进去逛了，于是我让他先回去，我则前往酒店办入住。</p><p>现在想想在天大边上订酒店真是正确的选择，虽然我也没什么行李。</p><p>没等我在酒店好好躺一躺玩玩游戏，噩耗（？）就传来了。原来是我的梦拓<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>发消息说第二天下午两点要带小组成员去航空航天博物馆和校史馆参观留痕。这一下计划全乱了，本来打算周六玩一天，晚上回去的，从从容容游刃有余，现在变成匆匆忙忙连滚带爬了（x</p><p>这下懒觉也没得睡了，为了最起码能逛够天大，只能决定七点钟起床然后买个早餐就去了，好在<ins>丁君</ins>亦未寝，一把抓住，相与步于校园。</p><div class="warning"><p>早餐买了几个火烧，结果没买喝的，差点把我噎死了</p></div><p><img src="/posts/bf207952/%E5%8C%97%E6%B4%8B%E5%A4%A7%E5%AD%A6%E5%A0%82.webp" alt="北洋大学堂"></p><p>天大的“北洋情节”确实很浓厚，毕竟作为中国历史上第一所现代意义上的大学，这个名号如果能够传下来是很加分的。它不像湖南大学或武汉大学那样强行从历史中找出些蛛丝马迹，给自己增添校史，也不像湘潭大学那样由于特殊的历史时期导致大家更愿意纪念“复校”而不是“建校”，它就是第一所，实实在在的第一所，可惜“北洋”这两个字早已声名狼藉，不再配得上这等荣誉了。</p><h1 id="海棠节">海棠节</h1><p>第二次前去，我选择拒绝分两天游玩的规划，而是决定一天走遍（？）天津。<br>这次仍然是有一个契机。时值清明假期，<ins>丁君</ins>说要来北京玩玩，我自然是无法推辞要给他当向导的。一问，他只玩一天，再一问，次日原来是天津的“海棠节”，天大有校园开放日。于是我立刻下定决心今天带他逛北京，明天我要再去天津好好玩一玩。</p><p>这次一同前往的还有<ins>彭卿</ins>。<ins>彭卿</ins>也是高中的校友，但是高中时是不认识的。她在北科，离我很近，有次说要和她朋友来 BUAA 参观，我于是很乐意为她们预约拜访，带着逛了一圈。后来我也去北科打了卡，一起吃了小火锅，这一来二去就熟悉了起来。这次一起去天津玩，让我感受到了她的能力之恐怖（w</p><p>回到正题。<ins>丁君</ins>的北京之旅也是一日游，所以我一定是好好招待的，抓着他走了四万步。首先天安门外面瞄了一眼，然后逛了天坛公园，又晃到北二外把<ins>姚卿</ins>找了出来，全部抓回 BUAA 再逛，最后在龙船码头（好吃 😋）吃火锅结束一天。临走之前，我嘱咐他：</p><blockquote><p>明天我们坐最早的车过来，你记得来车站接我们。</p></blockquote><p>难绷。</p><p>是的，五点多我就起来收拾东西了，然后和<ins>彭卿</ins>前往北京南站坐车。</p><div class="danger"><p>有人说这太折磨<ins>丁君</ins>了，那我在北京也走了四万步啊怎么没说折磨我（</p></div><p><img src="/posts/bf207952/%E5%A4%A9%E6%B4%A5.webp" alt="天津"></p><p>天津真的种了很多海棠。校园里也有很多，风吹时花瓣飞舞非常好看。</p><p><img src="/posts/bf207952/%E9%93%AD%E5%BE%B7%E9%81%93.webp" alt="铭德道的落花"></p><p>落花下我们再次游览了天大。参加了很多摊位的活动，手工咖啡、塔罗牌、签名等等。我们还跑到他们中法合办的学院的校友签名墙上签了名。</p><blockquote><p>校友不就是外校的朋友吗？🤔</p></blockquote><p><img src="/posts/bf207952/%E5%A4%A9%E5%A4%A7%E5%BB%BA%E7%AD%91%E7%B3%BB.webp" alt="天大建筑系，欣赏建筑真是享受"></p><p>之后因为<ins>丁君</ins>要复习，下午就没让他继续陪着了，于是事情演变成了<ins>彭卿</ins>和我，以及她手机里的十几个小红书打卡点。</p><p>从这件事就完全可以看出她规划事情之强。我的计划本来是一日游，而她一开始想要玩两天的。我说你不必管我，可她一合计，决定也是一日游。我本以为她是做了什么取舍的，现在想想应该是心算了一下发现一天也能游完所有想去的地方（</p><p><img src="/posts/bf207952/%E5%A4%A9%E6%B4%A5%E4%B9%8B%E7%9C%BC.webp" alt="天津之眼"><br><img src="/posts/bf207952/%E6%84%8F%E9%A3%8E%E5%8C%BA%E9%92%9F%E6%A5%BC.webp" alt="意大利风情区"><br><img src="/posts/bf207952/%E9%BC%93%E6%A5%BC.webp" alt="鼓楼"></p><p>当时我还是魔丸时候（？），对气温没个概念，十几度的天穿了薄薄两件就去了。虽然陪着逛很开心，景点也很漂亮，但是晚上我真被冻得半死 www<br>不过我都说晚上了，可见我们从下午一直到晚上都在逛来逛去。她真的规划了一切，从这个景点到那个景点，最后也是成功的一天之内收获满满，好吃的好玩的都体验了，甚至到天津站时还有时间买一袋麻花走。</p><p>恐怖如斯……</p><h1 id="过生日！">过生日！</h1><p>第三次去天津，时间正是本文初次发表的日期。时间安排仍然是很紧张，上午从西站接到老妈之后，回学校把行李放了，然后自信满满地又坐地铁到西站，决定到了再买票，反正车多。到六里桥的时候一股神秘的力量（？）驱使我打开 12306 看看几点钟有票，这一看可不得了，我惊喜的发现西站没有去天津的车，于是又马不停蹄前往南站，耽误了许多时间，让天津游从 3/4 日变成了半日。</p><p>这次带上了作为生日礼物的人生中第一台相机，锤炼锤炼摄影技术。老妈专门跑到天津来主要是要去南开大学打卡，原因是我的舅舅是南开毕业的。南开同样有着深厚的历史底蕴，南开大学八里台站还做成了主题站点的样式，里面充满了南开的元素，感觉真的非常有趣。</p><p>最后附上一些相机拍的图吧~</p><p><img src="/posts/bf207952/%E7%8B%97%E4%B8%8D%E7%90%86.webp" alt="狗不理包子"><br><img src="/posts/bf207952/%E9%92%9F%E4%B9%A6%E9%98%81.webp" alt="请忽略神秘光点（"><br><img src="/posts/bf207952/%E4%B8%96%E7%BA%AA%E9%92%9F.webp" alt="世纪钟"><br><img src="/posts/bf207952/%E7%8C%AB%E7%8C%AB.webp" alt="最满意的一张猫猫"></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>梦拓是我们 BUAA 的一个神秘组织。写下这篇文章的时候，我也是这个组织中的一员。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E5%85%AB%E7%B4%98%E4%B9%9D%E9%87%8E%E9%9B%86/">八紘九野集</category>
      
      
      <category domain="https://samuflore.top/tags/Travel/">Travel</category>
      
      <category domain="https://samuflore.top/tags/Tianjin-City/">Tianjin City</category>
      
      
      <comments>https://samuflore.top/posts/bf207952/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P2]宏、函数与栈</title>
      <link>https://samuflore.top/posts/2d82ddc6/</link>
      <guid>https://samuflore.top/posts/2d82ddc6/</guid>
      <pubDate>Fri, 24 Oct 2025 12:27:29 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;我曾写过我更偏好于进入函数后入栈，离开函数前出栈，但这样我一道题都做不对。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>我曾写过我更偏好于进入函数后入栈，离开函数前出栈，但这样我一道题都做不对。</p><span id="more"></span><hr><h1 id="宏">宏</h1><p>MIPS 中，可以通过这样的方式来定义宏：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> name(%param1, %param2, ...)</span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># function #</span></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>命名的时候也可以不要参数，这样使用的时候也不用传入参数。</p><p>在我看来宏其实和函数区别并不明显。但是宏比较适合定义一些反复使用，同时简约的函数，比如结束进程：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br></pre></td></tr></table></figure><p>非要说这样可以节约很多行代码，其实好像也没有，但是看起来就是舒服一点（</p><p>以下是一些很常用的宏：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exit program</span></span><br><span class="line"><span class="meta">.macro</span> end </span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># read an int</span></span><br><span class="line"><span class="meta">.macro</span> readNum(%r) </span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">move </span>%r, $<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># read a char, you don&#x27;t need to input an &quot;enter&quot; or a &quot;space&quot; between two chars, or these invisible sh*ts will be read!</span></span><br><span class="line"><span class="meta">.macro</span> readChar(%r) </span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">12</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">move </span>%r, $<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># print an int</span></span><br><span class="line"><span class="meta">.macro</span> printNum(%r) </span><br><span class="line">    <span class="keyword">move </span>$<span class="built_in">a0</span>, %r</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># print a char</span></span><br><span class="line"><span class="meta">.macro</span> printChar(%r) </span><br><span class="line">    la $<span class="built_in">a0</span>, %r</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># push %r into stack</span></span><br><span class="line"><span class="meta">.macro</span> push(%r) </span><br><span class="line">    <span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line">    <span class="keyword">sw </span>     %r, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop stack elements to %r</span></span><br><span class="line"><span class="meta">.macro</span> pop(%r)</span><br><span class="line">    <span class="keyword">lw </span>     %r, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># get an element&#x27;s address offset of a matrix</span></span><br><span class="line"><span class="meta">.macro</span> getIndex1(%ans, %i, %<span class="keyword">j, </span>%n) <span class="comment"># &quot;n&quot; for the number of columns of the matrix</span></span><br><span class="line">    <span class="keyword">mult </span>%i, %n</span><br><span class="line">    <span class="keyword">mflo </span>%ans <span class="comment"># ans = i * n</span></span><br><span class="line">    <span class="keyword">add </span>%ans, %ans, %<span class="keyword">j </span><span class="comment"># ans = i * n + j</span></span><br><span class="line">    <span class="keyword">sll </span>%ans, %ans, <span class="number">2</span> <span class="comment"># ans = 4 * (i * n + j)</span></span><br><span class="line">.end_macro</span><br><span class="line"><span class="comment"># usage: </span></span><br><span class="line"><span class="comment"># lw $des matrix($offset)</span></span><br><span class="line"><span class="comment"># sw $src matrix($offset)</span></span><br><span class="line"><span class="comment"># &quot;offset&quot; is the &quot;%ans&quot;</span></span><br><span class="line"><span class="comment"># tips: if the columns number is 2^n, use &quot;sll&quot; instead of &quot;mult, mflo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get an element&#x27;s address offset of an array</span></span><br><span class="line"><span class="meta">.macro</span> getIndex2(%ans, %index)</span><br><span class="line">    <span class="keyword">sll </span>%ans, %index, <span class="number">2</span> <span class="comment"># ans = 4 * index</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>注意：两个宏可以取同一个名字，编译器通过传入的参数来判断展开为哪一段代码，比如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">str:</span> .asciiz <span class="string">&quot; is a number.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> print(%r)</span><br><span class="line">    la $<span class="built_in">a0</span>, %r</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> print(%r1, %r2)</span><br><span class="line">    <span class="keyword">move </span>$<span class="built_in">a0</span>, %r1</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>    la $<span class="built_in">a0</span>, %r2</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">114514</span></span><br><span class="line">print(str)</span><br><span class="line">print($<span class="built_in">t0</span>, str)</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br></pre></td></tr></table></figure><p>两次输出分别为 <code> is a number.</code> 和 <code>114514 is a number.</code>。</p><h1 id="函数与栈">函数与栈</h1><p>MIPS 中被称之为“函数”的东西，是比宏复杂得多了。一般来说，都需要用一个标签名来隔离开，并用 <code>jal</code> 指令进入函数体，执行完再 <code>jr $ra</code> 回来。比如说：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment">#################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="comment">########</span></span><br><span class="line"><span class="comment"># code #</span></span><br><span class="line"><span class="comment">########</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>dfs</span><br><span class="line"><span class="comment"># print or sth.</span></span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">dfs:</span></span><br><span class="line">    <span class="comment">########</span></span><br><span class="line">    <span class="comment"># code #</span></span><br><span class="line">    <span class="comment">########</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>这就不是像宏一样展开了。函数体独立于主程序外（其实可以给主程序也加个标签叫做 <code>main:</code>），要用的时候相对跳转过去，用完了还得返回之前的位置执行下一行指令。其实宏和函数并没有严格界限，还得视情况而定。不过某种情况下我们还是得用这种标签法，那就是函数涉及递归时。</p><p>考虑翻译递归函数的 C 语言代码为 MIPS：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// print or sth.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (condition)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要进入 <code>dfs</code>，我们使用 <code>jal</code>，<code>return</code> 或执行到函数尾时，我们用 <code>jr $ra</code> 结束这一层函数调用，回到上一层函数调用。执行 <code>dfs(i + 1)</code> 时，我们用 <code>jal dfs</code> 调用子函数。<br>然而，在讨论出入栈问题时，我们必须明确：</p><ol><li class="lvl-3"><p>要出入栈的内容包括：<code>$ra</code>，调用子函数时会改变、从子函数回来时要恢复的元素（在这里，比如说 <code>i</code>）。</p></li><li class="lvl-3"><p>调用子函数后，栈顶保存的是上一层函数中第一条指定的内容。我们通过例子来看：</p></li></ol><p>首先 <code>i</code> 肯定需要用一个寄存器保存，我们就假设是 <code>$t0</code>。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">main:</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">0</span> <span class="comment"># t0 = i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>dfs</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">dfs:</span></span><br><span class="line">    &lt;condition&gt; <span class="keyword">branch1</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">j </span><span class="keyword">branch2</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    branch1:</span></span><br><span class="line">        <span class="comment"># print or sth.</span></span><br><span class="line">        <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment"># return</span></span><br><span class="line"><span class="symbol">    branch2:</span></span><br><span class="line">    </span><br><span class="line">    &lt;condition&gt; <span class="keyword">branch3</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">j </span><span class="keyword">branch4</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    branch3:</span></span><br><span class="line">        push($<span class="built_in">ra</span>)</span><br><span class="line">        push($<span class="built_in">t0</span>)</span><br><span class="line">        <span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">jal </span>dfs</span><br><span class="line">        pop($<span class="built_in">t0</span>)</span><br><span class="line">        pop($<span class="built_in">ra</span>)</span><br><span class="line">        <span class="comment"># some code use $t0</span></span><br><span class="line"><span class="symbol">    branch4:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment"># end of dfs</span></span><br></pre></td></tr></table></figure><p>我们把第 n 层 <code>dfs</code> 称作 <code>dfsn</code>，从 <code>dfs1</code> 开始。</p><ol><li class="lvl-3"><p>首先，<code>main</code> 调用 <code>dfs1</code>，假设进入第二个条件判断并满足条件，那么 <code>$ra</code> 和 <code>$t0</code> 入栈。入栈的 <code>$ra</code> 指向 <code>main</code> 的 <code>end</code>，<code>$t0</code> 为 0。</p></li><li class="lvl-3"><p><code>$t0 + 1</code> 变成 1。<code>jal</code> 跳转 <code>dfs2</code>。此时新的 <code>$ra</code> 指向 <code>dfs1</code> 的 <code>pop($t0)</code>，<code>$t0</code> 为 1。</p></li><li class="lvl-3"><p>假设 <code>dfs2</code> 仍然进入第二个条件判断并满足条件，那么入栈的 <code>$ra</code> 指向 <code>dfs1</code> 的 <code>pop($t0)</code>，<code>$t0</code> 为 1。</p></li><li class="lvl-3"><p><code>$t0 + 1</code> 变成 2。<code>jal</code> 跳转 <code>dfs3</code>。此时新的 <code>$ra</code> 指向 <code>dfs2</code> 的 <code>pop($t0)</code>，<code>$t0</code> 为 2。</p></li><li class="lvl-3"><p>让 <code>dfs3</code> 满足第一个条件，使用 <code>jr</code> 回到 <code>dfs2</code> 的 <code>pop($ra)</code> 吧。经过两个 <code>pop</code> 后，<code>$ra</code> 指向了 <code>dfs1</code> 的 <code>pop($ra)</code>，<code>$t0</code> 为 1。</p></li><li class="lvl-3"><p>到 <code>dfs2</code> 函数尾，<code>jr</code> 回到 <code>dfs1</code> 的 <code>pop($ra)</code>，经过两个 <code>pop</code> 后，<code>$ra</code> 指向了 <code>main</code> 的 <code>end</code>，<code>$t0</code> 为 0。</p></li><li class="lvl-3"><p>到 <code>dfs1</code> 函数尾，<code>jr</code> 回到 <code>main</code> 的 <code>end</code>，运行 <code>end</code> 结束。</p></li></ol><p>显然这样是可以的，不会弄乱每层 <code>i</code> 的值，也能正常回到主函数。</p><p>另一种出入栈方式是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">main:</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">1</span> <span class="comment"># t0 = i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>dfs</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">dfs:</span></span><br><span class="line">    push($<span class="built_in">ra</span>)</span><br><span class="line">    push($<span class="built_in">t0</span>)</span><br><span class="line"></span><br><span class="line">    &lt;condition&gt; <span class="keyword">branch1</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">j </span><span class="keyword">branch2</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    branch1:</span></span><br><span class="line">        <span class="comment"># print or sth.</span></span><br><span class="line">        <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment"># return</span></span><br><span class="line"><span class="symbol">    branch2:</span></span><br><span class="line">    </span><br><span class="line">    &lt;condition&gt; <span class="keyword">branch3</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">j </span><span class="keyword">branch4</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    branch3:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">jal </span>dfs</span><br><span class="line">        <span class="comment"># some code use $t0</span></span><br><span class="line"><span class="symbol">    branch4:</span></span><br><span class="line">    </span><br><span class="line">    pop($<span class="built_in">t0</span>)</span><br><span class="line">    pop($<span class="built_in">ra</span>)</span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment"># end of dfs</span></span><br></pre></td></tr></table></figure><p>同样的：</p><ol><li class="lvl-3"><p><code>main</code> 调用 <code>dfs1</code>，入栈 <code>$ra</code> 指向 <code>main</code> 的 <code>end</code>，<code>$t0 = 0</code>。</p></li><li class="lvl-3"><p>满足第二个条件，<code>$t0 = 1</code>，<code>jal</code> 跳转 <code>dfs2</code> 后 <code>$ra</code> 指向 <code>dfs1</code> 的 <code># some code use $t0</code>，<code>$t0 = 1</code>。</p></li><li class="lvl-3"><p>入栈 <code>$ra</code> 指向 <code>dfs1</code> 的 <code># some code use $t0</code>，<code>$t0 = 1</code>。</p></li><li class="lvl-3"><p>满足第二个条件，<code>$t0 = 2</code>，<code>jal</code> 跳转 <code>dfs3</code> 后 <code>$ra</code> 指向 <code>dfs2</code> 的 <code># some code use $t0</code>，<code>$t0 = 2</code>。</p></li><li class="lvl-3"><p><code>dfs3</code> 满足第一个条件，<code>jr</code> 回到 <code>dfs2</code> 的 <code># some code use $t0</code>，这时候，问题出现了。</p></li></ol><p>什么问题呢？回到 <code>dfs2</code> 的时候，<code>$t0</code> 是 2，下文使用 <code>$t0</code> 的时候，都是用 2 来运行的。可是 <code>dfs2</code> 对应的 <code>$t0</code> 应该是 1（调用 <code>dfs1</code> 时 <code>$t0</code> 为 0，<code>dfs2</code> 时为 1）。这是为什么呢？</p><p>原因出在 <code>addi $t0, $t0, 1</code> 上。这是因为我们需要 <code>dfs(i + 1)</code>。按理说，是将 <code>i + 1</code> 传入下一层函数，不应该改变本层 <code>i</code> 的值。但是 MIPS 并不如 C 语言那样智能，给你创建 <code>i</code> 的副本来保存不同层的值。所有层的 <code>i</code> 都存放在 <code>$t0</code> 这个寄存器中。这就是为什么我们需要手动出入栈。在第一种写法，我们是<ins>先入 <code>dfsn</code> 的栈，再跳转 <code>dfsn+1</code></ins>，而第二种写法是 <ins>先跳转 <code>dfsn+1</code>，再入 <code>dfsn</code> 的栈</ins>。在 <code>$ra</code> 上面，这两种是等效的，均可以实现递归-回溯。但是要用到 <code>$t0</code>，则第二种需要手动减去 <code>$t0</code> 的增加值：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">main:</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">1</span> <span class="comment"># t0 = i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>dfs</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">dfs:</span></span><br><span class="line">    push($<span class="built_in">ra</span>)</span><br><span class="line">    push($<span class="built_in">t0</span>)</span><br><span class="line"></span><br><span class="line">    &lt;condition&gt; <span class="keyword">branch1</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">j </span><span class="keyword">branch2</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    branch1:</span></span><br><span class="line">        <span class="comment"># print or sth.</span></span><br><span class="line">        <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment"># return</span></span><br><span class="line"><span class="symbol">    branch2:</span></span><br><span class="line">    </span><br><span class="line">    &lt;condition&gt; <span class="keyword">branch3</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">j </span><span class="keyword">branch4</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    branch3:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">jal </span>dfs</span><br><span class="line">        <span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, -<span class="number">1</span> <span class="comment"># add this line</span></span><br><span class="line">        <span class="comment"># some code use $t0</span></span><br><span class="line"><span class="symbol">    branch4:</span></span><br><span class="line">    </span><br><span class="line">    pop($<span class="built_in">t0</span>)</span><br><span class="line">    pop($<span class="built_in">ra</span>)</span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment"># end of dfs</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P2/">P2</category>
      
      <category domain="https://samuflore.top/tags/MIPS/">MIPS</category>
      
      <category domain="https://samuflore.top/tags/Recursion/">Recursion</category>
      
      
      <comments>https://samuflore.top/posts/2d82ddc6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P1]P1 上机之思考</title>
      <link>https://samuflore.top/posts/fae59a6c/</link>
      <guid>https://samuflore.top/posts/fae59a6c/</guid>
      <pubDate>Mon, 20 Oct 2025 16:16:11 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;水平太差了。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>水平太差了。</p><span id="more"></span><hr><h1 id="第一题">第一题</h1><h2 id="题干">题干</h2><p>第一题是一个组合逻辑的运用。给出一个位宽为 36 的输入 a ，代表一个 6 x 6 的矩阵。再给出一个位宽为 9 的输入  ，代表一个 3 x 3 的卷积核。要求输出一个位宽为 16 的输出 ans ，代表卷积后的 4 x 4 的矩阵。卷积的具体算法也给出了。由于输入是从低到高依次填入矩阵，所以矩阵元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>×</mo><mi>n</mi><mo>+</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M[i][j] = {a_{i \times n + j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span>。</p><p>总的来说，第一题只要照葫芦画瓢即可。</p><hr><h1 id="第二题">第二题</h1><h2 id="题干-2">题干</h2><p>一个应用题类型的题。有一个 op 输入，表示四种操作。分别是往一个长度 128 的数组最低位添加元素（原有元素往高位移动 1 位）、读取指定位的元素、统计某元素的个数、以及保持上一周期输出。</p><h2 id="思考">思考</h2><p>光看题干其实这题并不难，但是需要掌握很多东西才能做。首先是 Verilog 中数组的定义：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt; &lt;位宽声明&gt; &lt;数组名&gt; &lt;长度声明&gt;;</span><br></pre></td></tr></table></figure><p>其中长度声明和位宽声明一样是 <code>[高位:低位]</code>。访问元素直接用下标即可。</p><p>然后是给数组初始化，在 <code>initial</code> 块和 <code>reset</code> 触发时，用 <code>for</code> 循环完成。在 <code>reset</code> 触发时，记得使用非阻塞赋值。</p><div class="note warning">            <p>直到这时我才知道 <code>initial</code> 块应当被归类到组合逻辑中，使用阻塞赋值。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i = i + <span class="number">1</span>)</span><br><span class="line">    array[i] = <span class="number">3&#x27;b000</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>          </div><p>题目的关键在于统计某元素的个数。如果说在时序逻辑块里面写这样的代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] cnt &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">127</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (array[i] == query) cnt &lt;= cnt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这就错了。考虑某一上升沿，开始执行这一部分代码。cnt 初始化为 0。当满足 if 条件，cnt 为 0 的快照在赋值语句右侧，也就是 cnt = cnt(为0) + 1。只有当 always 完全结束，右侧才会赋给左侧。但 for 循环仍在继续，第二次满足 if 条件，又执行 cnt = cnt(为0) + 1，因此 for 循环无论执行多少次，等 always 结束，cnt 只会变成 1。再次执行 always，再次执行 for，再次结束后，cnt 会变成 2（如果 if 还能满足的话）。宏观上，这表现为 cnt 每个上升沿 + 1，而非一次性得到 cnt 真正的值。</p><p>有两种解决方案：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（换成阻塞赋值）</span></span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">127</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (array[i] == query) cnt = cnt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="comment">//（另开一个组合逻辑块）</span></span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">127</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (array[i] == query)</span><br><span class="line">            cnt = cnt + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h1 id="第三题">第三题</h1><h2 id="题干-3">题干</h2><p>设计一个 Moore 机，对一个 json 序列进行有效性检测并统计键值对数量。每个周期内，串行输入 json 序列的一个字符。<br>json 的格式已简化如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span><span class="string">&quot;value2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;key3&quot;</span><span class="punctuation">:</span><span class="string">&quot;value3&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>中间不会有任何空白字符。</p><p>对于所有输入的 json 序列，都满足以下格式规范：</p><ul class="lvl-0"><li class="lvl-2"><p>每个 json 序列以左大括号 “{” 为开始，以右大括号 “}” 为结束。内部不包含嵌套大括号。</p></li><li class="lvl-2"><p>每个 json 序列内部由不定组键值对组成，每组键值对之间用逗号 “,” 隔开。可以没有键值对，也可以有多组键值对。最多包含 255 组键值对。</p></li><li class="lvl-2"><p>键值对的格式严格符合 <code>&quot;key&quot;:&quot;value&quot;</code> 。其中内部的 <code>key</code> 和 <code>value</code> 可被替换且至少有一个字符（不为空字符串），例如 <code>&quot;test&quot;:&quot;CO&quot;</code> 。字符串由大小写字母和数字组成，不包含嵌套双引号，长度最多为 15 个字符。</p></li><li class="lvl-2"><p>相邻两个 json 序列间用若干个空格隔开（可以没有空格）。例如 <code>&#123;&quot;fruit&quot;:&quot;apple&quot;&#125; &#123;&#125;&#123;&quot;animal&quot;:&quot;cat&quot;&#125;</code> 。</p></li></ul><p>输出介绍：</p><ul class="lvl-0"><li class="lvl-2"><p><code>cur_num</code>: 输出当前 json 序列的键值对数目。具体的，在每个 json 序列输入完毕的下一个时钟上升沿更新该 json 序列中的键值对数目。</p></li><li class="lvl-2"><p><code>max_num</code>: 输出历史输入的 json 序列的键值对数目的最大值。具体的，每次 <code>cur_num</code> 更新时，同步更新 <code>max_num</code> 为历史所有 <code>cur_num</code> 中的最大值。</p></li></ul><p>特别情况：</p><ul class="lvl-0"><li class="lvl-2"><p>正常情况下 json 序列键值对中的字符串不为空，即至少有一个字符。</p></li><li class="lvl-2"><p>若 json 序列键值对中的字符串出现空串，即 <code>&#123;&quot;&quot;:&quot;value&quot;&#125; 或 &#123;&quot;key&quot;:&quot;&quot;&#125;</code> ，则该 json 序列为无效序列，其 <code>cur_num</code> 视为 <code>8'd0</code> 。 json 序列为有效序列当且仅当内部所有键值对的字符串都不是空串。</p></li><li class="lvl-2"><p>除了上述情况外，不会出现其他非法情况。即输入的 json 序列只有两种：1. 合法 json 序列，所有键值对的字符串均不为空串。 2. 无效 json 序列，至少有一个字符串是空串。</p></li></ul><h2 id="思考-2">思考</h2><p>这题要求多，状态也多。在输入 “{” 时，要考虑下一个是 “}” 的情况。这时需输出 <code>cur_num</code> 为 0，<code>max_num</code> 不变。如果输入左引号后接着输入右引号，那么整个 json 都是无效的，在输入 “}” 后同样 <code>cur_num</code> 为 0，<code>max_num</code> 不变。</p><p>在更新 <code>max_num</code> 的时候我遇到了问题。按理说，对于时序逻辑，我们必须避免使用阻塞赋值。但是此处我却不得不用上它：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num &lt;= cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cur_num &gt; max_num) max_num &lt;= cur_num;</span><br></pre></td></tr></table></figure><p>倘若要更新 <code>max_num</code>，问题就出现了。非阻塞赋值把 <code>cur_num</code> 做一个快照，然后赋给 <code>max_num</code>。也就是说 <code>max_num</code> 拿到的是 <code>+ 1</code> 前的 <code>cur_num</code>，导致出现延迟。倘若要实现理想的效果，则需要改为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num = cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cur_num &gt; max_num) max_num = cur_num;</span><br></pre></td></tr></table></figure><p><code>isInvalid</code> 用来标志该 json 串是否为空串或异常串。</p><p>这的确是对的。</p><p>不过我们还是遵从代码规范吧，不要用阻塞赋值，于是我改了这样一版：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num &lt;= cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cur_num &gt; max_num) max_num &lt;= cur_num + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这根本不对。我们就假设 <code>cur_num = 0</code>，<code>max_num = 0</code> 好了。现在我要把 <code>cur_num + 1</code>，然后赋给 <code>max_num</code>。但是由于非阻塞赋值的原因，在 if 条件比较的时候比的是两个 0，也就是说条件都进不去。</p><p>这时候读者朋友肯定要说了：“你把条件改成 <code>cur_num &gt;= max_num</code> 不就行了？”诶，事实证明，这其实还是错的。如果我的 <code>max_num = 0</code>，然后碰到一个空串会怎样呢？首先 <code>isInvalid = 1</code>，进入 <code>else cur_num &lt;= 0</code> 的条件。<code>cur_num</code> 都是 0 了，那肯定不需要更新 <code>max_num</code> 了。然而，<code>max_num</code> 拿到的是之前的快照，甚至还 <code>+ 1</code>，这下更不更新就不好说了。所以最正确的写法是：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num &lt;= cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!isInvalid &amp;&amp; (cur_num &gt; max_num)) max_num &lt;= cur_num + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这题作为一个有限状态机的题，确实略微复杂，特别是需要深刻理解阻塞赋值和非阻塞赋值的差异。如果抛弃实用性来说，只要知道自己为什么要用阻塞赋值，在时序逻辑中使用是可以理解的。然而实用性大于天，所以还是用非阻塞吧~</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P1/">P1</category>
      
      <category domain="https://samuflore.top/tags/Verilog/">Verilog</category>
      
      
      <comments>https://samuflore.top/posts/fae59a6c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MD 样式测试</title>
      <link>https://samuflore.top/posts/937d20ea/</link>
      <guid>https://samuflore.top/posts/937d20ea/</guid>
      <pubDate>Mon, 20 Oct 2025 06:02:30 GMT</pubDate>
      
      <description>&lt;div class=&quot;center&quot;&gt;
&lt;h1 id=&quot;Twinkle-Twinkle-Little-Star&quot;&gt;Twinkle, Twinkle, Little Star&lt;/h1&gt;
&lt;div class=&quot;right&quot;&gt;
&lt;p&gt;——Jane Taylor&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Twinkle, twinkle, little star,&lt;/p&gt;
&lt;p&gt;How I wonder what you are!&lt;/p&gt;
&lt;p&gt;Up above the world so high,&lt;/p&gt;
&lt;p&gt;Like a diamond in the sky.&lt;/p&gt;
&lt;p&gt;When the blazing sun is gone,&lt;/p&gt;
&lt;p&gt;When he nothing shines upon,&lt;/p&gt;
&lt;p&gt;Then you show your little light,&lt;/p&gt;
&lt;p&gt;Twinkle, twinkle, all the night.&lt;/p&gt;
&lt;p&gt;Then the traveller in the dark,&lt;/p&gt;
&lt;p&gt;Thanks you for your tiny spark,&lt;/p&gt;
&lt;p&gt;He could not see which way to go,&lt;/p&gt;
&lt;p&gt;If you did not twinkle so.&lt;/p&gt;
&lt;p&gt;In the dark blue sky you keep,&lt;/p&gt;
&lt;p&gt;And often thro’ my curtains peep,&lt;/p&gt;
&lt;p&gt;For you never shut your eye,&lt;/p&gt;
&lt;p&gt;Till the sun is in the sky.&lt;/p&gt;
&lt;p&gt;&#39;Tis your bright and tiny spark,&lt;/p&gt;
&lt;p&gt;Lights the trav’ller in the dark,&lt;/p&gt;
&lt;p&gt;Tho’ I know not what you are,&lt;/p&gt;
&lt;p&gt;Twinkle, twinkle, little star.&lt;/p&gt;
&lt;/div&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div class="center"><h1 id="Twinkle-Twinkle-Little-Star">Twinkle, Twinkle, Little Star</h1><div class="right"><p>——Jane Taylor</p></div><p>Twinkle, twinkle, little star,</p><p>How I wonder what you are!</p><p>Up above the world so high,</p><p>Like a diamond in the sky.</p><p>When the blazing sun is gone,</p><p>When he nothing shines upon,</p><p>Then you show your little light,</p><p>Twinkle, twinkle, all the night.</p><p>Then the traveller in the dark,</p><p>Thanks you for your tiny spark,</p><p>He could not see which way to go,</p><p>If you did not twinkle so.</p><p>In the dark blue sky you keep,</p><p>And often thro’ my curtains peep,</p><p>For you never shut your eye,</p><p>Till the sun is in the sky.</p><p>'Tis your bright and tiny spark,</p><p>Lights the trav’ller in the dark,</p><p>Tho’ I know not what you are,</p><p>Twinkle, twinkle, little star.</p></div><span id="more"></span><p><ruby>中国<rt>zhōng guó</rt></ruby></p><p><ruby>你好世界<rt>HelloWorldNihaoShijie这是中文</rt></ruby></p><p>VuePress Theme Hope <span class="spoiler">十分强大</span>。</p><p>Euler’s identity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>π</mi></mrow></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">e^{i\pi}+1=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.908em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">iπ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> is a beautiful formula in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>.</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><msup><mi mathvariant="normal">∂</mi><mi>r</mi></msup><mrow><mi mathvariant="normal">∂</mi><msup><mi>ω</mi><mi>r</mi></msup></mrow></mfrac><mrow><mo fence="true">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence="true">)</mo></mrow><mrow><mo fence="true">{</mo><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mi>r</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>I</mi></msup><mi>r</mi><mo>⋯</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mrow><mi>r</mi><mi>i</mi></mrow></msup></mrow><msup><mi>ω</mi><mi>i</mi></msup></mfrac><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^ Ir \cdots (r-i+1) (\log y)^{ri}} {\omega^i} \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0277em;vertical-align:-1.2777em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span></span></span></span></span><p>NH<sub>4</sub><sup>+</sup></p><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox2"><label for="checkbox2">这个任务还没做</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">这个任务做完了</label></p></li></ul><p><mark>我是高亮文本</mark></p><p>Here is a simple footnote<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>A footnote can also have multiple lines<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p><div class="wenyan"><div class="center"><h1 id="滕Teng王Wang閣Ge序Xu"><ruby>滕<rt>Teng</rt></ruby><ruby>王<rt>Wang</rt></ruby><ruby>閣<rt>Ge</rt></ruby><ruby>序<rt>Xu</rt></ruby></h1><h2 id="一">一</h2></div><p>豫章故郡，洪都新府。星分翼轸(zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃(fān)之榻。雄州雾列，俊采星驰，台隍(huáng)枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨(qǐ)戟遥临；宇文新州之懿(yì)范，襜(chān )帷(wéi)暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电清霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。<br>时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨(yǎn)骖騑(cān fēi)于上路，访风景于崇阿(ē)。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流（一作 翔）丹，下临无地。鹤汀（tīng）凫(fú )渚（zhǔ），穷岛屿之萦(yíng)回；桂殿兰宫，即（一作 列）冈峦之体势。</p></div><div class="wenyan"><div class="center"><h2 id="二">二</h2><div class="center"><p>披绣闼（tà），俯雕甍(méng )。山原旷其盈视，川泽纡(yū)其骇瞩。闾(lǘ)阎(yán) 扑地，钟鸣鼎食之家；舸（gě)舰弥津，青雀黄龙之舳（zhú）。云销雨霁(jì)，彩彻区明（或作 虹销雨霁，彩彻云衢 qú）。落霞与孤鹜(wù)齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（l ǐ）之滨；雁阵惊寒，声断衡阳之浦。<br>遥襟甫畅，逸兴遄(chuán)飞。爽籁发而清风生，纤歌凝而白云遏(è)。睢(suī)园绿竹，气凌彭泽之樽；邺(yè)水朱华，光照临川之笔。四美具，二难并。穷睇眄(dì miǎn)于中天，极娱游于暇日。天高地迥(jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会（kuài）于云间。地势极而南溟(míng)深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍(hūn)而不见，奉宣室以何年。</p></div></div></div><div class="wenyan"><div class="center"><h2 id="三">三</h2></div><p>嗟(jiē)乎！时运不齐，命途多舛(chuǎn)；冯唐易老，李广难封。屈贾谊（yì）于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊（shē），扶摇可接；东隅(yú)已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！<br>勃，三尺微命，一介书生。无路请缨，等终军之弱冠（guàn）；有怀投笔，慕宗悫（què）之长风。舍簪（zān）笏（hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨(tāo)陪鲤对；今兹捧袂(mèi)，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？<br>呜呼！胜地不常，盛筵(yán)难再；兰亭已矣，梓(zǐ) 泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。</p></div><div class="wenyan"><div class="center"><h1 id="蜀道難SHU-DAO-NAN"><ruby>蜀道難<rt>SHU DAO NAN</rt></ruby></h1></div><div class="right"><p>唐 李白</p></div><p>噫吁嚱，危乎高哉！蜀道之難，難於上青天！蠶叢及魚鳧，開國何茫然！爾來四萬八千歲，不與秦塞通人煙。西當太白有鳥道，可以橫絕峨眉巔。地崩山摧壯士死，然後天梯石棧相鈎連。上有六龍回日之高標，下有沖波逆折之回川。黃鶴之飛尚不得過，猿猱欲度愁攀援。青泥何盤盤，百步九折縈巖巒。捫參歷井仰脅息，以手撫膺坐長歎。<br>問君西遊何時還？畏途巉巖不可攀。但見悲鳥號古木，雄飛雌從繞林間。又聞子規啼夜月，愁空山。蜀道之難，難於上青天，使人聽此凋朱顔！連峯去天不盈尺，枯松倒掛倚絕壁。飛湍瀑流爭喧豗，砯崖轉石萬壑雷。其險也如此，嗟爾遠道之人胡為乎來哉！<br>劍閣崢嶸而崔嵬，一夫當關，萬夫莫開。所守或匪親，化為狼與豺。朝避猛虎，夕避長蛇；磨牙吮血，殺人如麻。錦城雖云樂，不如早還家。蜀道之難，難於上青天，側身西望長谘嗟！</p></div><h1 id="1">1</h1><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>My reference. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>To add line breaks within a footnote, prefix new lines with 2 spaces.<br>This is a second line <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      
      
      <comments>https://samuflore.top/posts/937d20ea/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P1]如何优雅地写 Testbench</title>
      <link>https://samuflore.top/posts/2dab591c/</link>
      <guid>https://samuflore.top/posts/2dab591c/</guid>
      <pubDate>Sun, 19 Oct 2025 15:15:17 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;学习自&lt;a href=&quot;https://roife.github.io/posts/buaa-co-lab-p1/&quot;&gt;ROIFE BLOG&lt;/a&gt;。&lt;/p&gt;
          &lt;/div&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><div class="note info">            <p>学习自<a href="https://roife.github.io/posts/buaa-co-lab-p1/">ROIFE BLOG</a>。</p>          </div><span id="more"></span><hr><p>倘若我们要串行输入很长一个字符串，你是否还在一行一行写 <code>#10 in = &quot;xxx&quot;;</code>而感到心力交瘁？你是否因为修改输入要一个字符一个字符改而烦闷？如果是的话，你最好学习一下我从大佬那学来的招数：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">0</span>:<span class="number">1023</span>] S = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">while</span>(!S[<span class="number">0</span>:<span class="number">7</span>]) S = S &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(; S[<span class="number">0</span>:<span class="number">7</span>]; S = S &lt;&lt; <span class="number">8</span>) <span class="keyword">begin</span></span><br><span class="line">      in = S[<span class="number">0</span>:<span class="number">7</span>];</span><br><span class="line">      #<span class="number">5</span>; <span class="comment">//间隔时间</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>看，大佬就是大佬，位宽声明都选择小数在前大数在后的做法。如果你和我一样是彩笔，这还有等价的常规写法：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">1023</span>:<span class="number">0</span>] S = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">while</span>(!S[<span class="number">1023</span>:<span class="number">1016</span>]) S = S &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(; S[<span class="number">1023</span>:<span class="number">1016</span>]; S = S &lt;&lt; <span class="number">8</span>) <span class="keyword">begin</span></span><br><span class="line">      in = S[<span class="number">1023</span>:<span class="number">1016</span>];</span><br><span class="line">      #<span class="number">5</span>; <span class="comment">//间隔时间</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>考察第一种写法。由于位宽声明为 <code>[0:1023]</code>，则 0 是高位，1023是低位。<code>abcd</code> 从低到高存储，<code>d</code> 是 1023-1016 位，<code>c</code> 是 1015-1008 位，以此类推。之后整个 <code>S</code> 是这样的：</p><p><code>0000......abcd</code></p><p>接着左移至不为 0 的位置，<code>S</code> 变成：</p><p><code>abcd......0000</code></p><p>循环取出前 8 位，直至整个 <code>S</code> 为 0，就可以遍历 <code>S</code> 中的字符串了。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P1/">P1</category>
      
      <category domain="https://samuflore.top/tags/Verilog/">Verilog</category>
      
      <category domain="https://samuflore.top/tags/Testbench/">Testbench</category>
      
      
      <comments>https://samuflore.top/posts/2dab591c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[鶴鳴洲集]“他妈的”，究竟是谁妈的？</title>
      <link>https://samuflore.top/posts/f4bf9c17/</link>
      <guid>https://samuflore.top/posts/f4bf9c17/</guid>
      <pubDate>Sun, 19 Oct 2025 06:15:12 GMT</pubDate>
      
      <description>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;530&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=22658523&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
&lt;hr&gt;
&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;這“他媽的”的由來以及始於何代，我也不明白。經史上所見罵人的話，無非是“役夫”，“奴”，“死公”；較厲害的，有“老狗”，“貉子”；更厲害，涉及先代的，也不外乎“而母婢也”，“贅閹遺醜”罷了！還沒見過什麼“媽的”怎樣，雖然也許是士大夫諱而不錄。&lt;br&gt;
&lt;strong&gt;《論“他媽的”》 魯迅&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="86" src="//music.163.com/outchain/player?type=2&id=22658523&auto=1&height=66"></iframe><hr><h1 id="序">序</h1><blockquote><p>這“他媽的”的由來以及始於何代，我也不明白。經史上所見罵人的話，無非是“役夫”，“奴”，“死公”；較厲害的，有“老狗”，“貉子”；更厲害，涉及先代的，也不外乎“而母婢也”，“贅閹遺醜”罷了！還沒見過什麼“媽的”怎樣，雖然也許是士大夫諱而不錄。<br><strong>《論“他媽的”》 魯迅</strong></p></blockquote><span id="more"></span><hr><h1 id="早有的疑惑">早有的疑惑</h1><p>我们都知道，时至今日，在普通话全国推行的大背景下，“ɲit”系（如湘语、西南官话等）和“ʦʰɑk”系（如赣语、南京官话等）这指代同一动作的两个最古老、最广泛的发音及其演变出的各变种仍因为地区的不同而出现在不同的方言中，尚未见一统的趋势。而与此截然不同的是这句“他妈的”竟然早已传遍九州，成为放之四海而皆准的一句国骂了，实在是让人啧啧称奇。不仅如此，这没头没尾的一个词（甚至不算一个词，仿佛是它原来是一个偏正短语，而“偏”把“正”都给掩盖了）也让人疑惑它为什么具有如此的攻击性和认可度。我曾和<ins>秀之兄</ins>探讨过这个神秘的问题——“他妈的”，究竟是谁妈的？可惜并没有实质性的结果。</p><p>现在我正打算好好重新思考这个问题。</p><hr><h1 id="虚空索敌">虚空索敌</h1><p>在二人对话的时候，这句“他妈的”貌似没有攻击任何人，可还是会让对方觉得自己受到了侮辱，说话人甚至不用在“他”前面再冠以一个“你”来强制指向听话人。这很奇怪，就像英语中的：</p><blockquote><p>Damn it!</p></blockquote><p>这里的“it”同样不是表示说话人真的诅咒了什么东西，可见“it”的语义在“damn”的对比下已经退化至几乎没有了。那么，既然“他妈的”能够对听话人造成直接的伤害，重点显然也不在“他”，而在“妈的”。</p><p>可这一词的出现也甚是奇怪。倘若叫一个外国人来看，一定无法理解它的意思——一个残缺的定语，仿佛话没有说完一样。纵观别国的国骂，是较少出现这样的现象的，像俄语的“Сука блядь”是由两个名词构成，日语的“馬鹿野郎（ばかやろう）”也是如此，英语的“Fuck”虽是动词，单独出现却并不像一个定语单独出现那么奇怪，而且后面还通常有一个“U”来锁定对面呢。相比之下，汉语仿佛一贯的“婉转”起来，不仅话不说完，还顾左右而言“他”，却仍然保持攻击力，该说不愧是保持了詈语中的“优良传统”——攻击人不如攻击其家人。</p><p>由此可见，其实这句“他妈的”并非虚空索敌。在“他”的意思弱化的前提下，如果一定要探讨其意义，那么首先：</p><p><mark>无论“他”是谁，它一定包含了“你”的意思。</mark></p><p>然而，语言并不在真空中产生。为什么终究是“他”而不是“你”，并不能简单地由此得到答案。</p><hr><h1 id="家与世家">家与世家</h1><p>按照鲁迅先生的说法，攻击血缘血统，“在戰略上，真可謂奇譎的了。最先發明這一句“他媽的”的人物，確要算一個天才，——然而是一個卑劣的天才。”<ins>魏</ins>、<ins>晋</ins>以来，世家、门阀兴起，几乎垄断了一切上升的道路。普通人想要为官从仕，难如登天。而世家子弟借助祖上积累的名望之荫蔽，即便平庸无能也能得到一个闲职。对此不满的人可以分为两类：有文化而寒门出身的，以及庶民。《广弘明记·卷七》中记载：</p><div class="wenyan"><p>邢子才、河間人、仕魏著作郎遷中書黄門郎、以為婦人不可保、謂元景曰、卿何必姓王、元景變色、子才曰、我亦何必姓邢、能保五世耶。</p></div><p>大概是说<ins>邢子才</ins>认为<ins>王元景</ins>并不一定姓<ins>王</ins>（即血统不纯之意），而自己也不一定姓<ins>邢</ins>。血统即使再高贵，五世之后继承它的人，仍然就高贵么？<ins>王</ins>自<ins>魏</ins>、<ins>晋</ins>时已是大姓，到<ins>北魏</ins>，旁支一定众多，其中想必就有与宗家相隔甚远，只是沾了<ins>王</ins>姓的光的存在。<ins>邢子才</ins>用这种方式讽刺这些承蒙祖辈威名的无能之人，轻而易举使其“变色”。毕竟他们既没有能力，也没有功绩，唯一值得骄傲的祖辈一旦被毁，就与庶民无异了。</p><p>而“同一的意思，但沒有邢子才的文才，而直出於“下等人”之口的，就是：‘他媽的！’”</p><p>我认为这段分析实在是精彩。一是即便是再卑微的分家，仍然不是彻底的庶民能高攀的；二是在教育不普及的古代，一般人的确很难以<ins>邢子才</ins>那样的方式去讽刺豪绅们。倘若穷苦老百姓受到这些末流的欺负了，便能够当着这些人的面狠狠骂一句“他妈的”——“你妈的”是不能骂的，而“他妈的”的“他”却可以任由自己发挥。比方说心里想骂的是这豪绅的兄弟姐妹，那也算是拐弯抹角的骂到他本人了。又或者是两个人闲谈，聊到乡里的这些“暴发户”们又订了什么苛捐杂税，又打人了抢劫了，于是啐一口，骂一句“他妈的”，这肯定是直指那些人本人了。</p><p>这样来看，<mark>人们把对欺压者、苦闷事化做一个假想敌（“他”），然后用最狠的方式去攻击来发泄怨气。</mark> 虽然这只是象征性的复仇，但是对于一个隐忍的民族来说，已经足够了。</p><hr><h1 id="语义通胀">语义通胀</h1><p>今天已经没人在乎“他妈的”究竟是谁妈的了。</p><p>以前，“冷”和“很冷”可能一个在零上，多穿点衣服还能正常活动；一个在零下，冻得你出不了门。而今天“冷”和“冷的要死”可能并没有什么区别。同样，“哈哈哈哈哈哈哈哈哈哈”并不比“哈哈哈”更高兴一些，叫“宝子”、“亲”未必就比叫“您”更亲昵，“食堂里”也未必（？）就装得下“全中国的人”……事物的发展之迅速超乎人的想象，语言不能及时更新，原有词汇的语义就必然会通胀以适应新的用途。</p><p>“他妈的”也是如此。现在“他”就算直接换成“你”，我想真正会感到被冒犯的人也不会占多数。这句话已经彻底成为了一个语气词：它早已失去语法功能，现在其辱骂的意义也已被稀释。究其原因其实很多，汉语的詈语随着时间的变化也在不断变多，更具攻击性的话也层出不穷。社会风气的转变和民众思想的开悟也是重要的原因，人们很多时候不再需要拐弯抹角地去攻击来获得内心的安慰。</p><p>另外：</p><blockquote><p>中國人至今還有無數“等”，還是依賴門第，還是倚仗祖宗。倘不改造，即永遠有無聲的或有聲的“國罵”。就是“他媽的”，圍繞在上下和四旁，而且這還須在太平的時候。</p></blockquote><p>现在来看，确实已经彻底改造了。</p><h1 id="最后的最后">最后的最后</h1><p>“ɲit”系和“ʦʰɑk”系仍因为地区的不同而出现在不同的方言中，尚未见一统的趋势。而与此截然不同的是这句“他妈的”竟然早已传遍九州，成为放之四海而皆准的一句国骂了。再次考虑开头这个问题，其实并不难回答。因为“他妈的”所蕴含的用法、深层的社会基础和跨越地域和方言的朴素情感，让它举国通用。方言仍然会影响这三个字的具体读音，但是“他”永远是“他妈的”的“他”，“妈”永远是“他妈的”的“妈”，“的”永远是“他妈的”的“的”。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E9%B6%B4%E9%B3%B4%E6%B4%B2%E9%9B%86/">鶴鳴洲集</category>
      
      
      <category domain="https://samuflore.top/tags/Linguistics/">Linguistics</category>
      
      
      <comments>https://samuflore.top/posts/f4bf9c17/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[孤獨星球]贺卿传</title>
      <link>https://samuflore.top/posts/90dbc4f6/</link>
      <guid>https://samuflore.top/posts/90dbc4f6/</guid>
      <pubDate>Tue, 14 Oct 2025 11:00:48 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;以本文纪念一个为枯燥高三生活带来涟漪的人。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>以本文纪念一个为枯燥高三生活带来涟漪的人。</p><span id="more"></span><hr><h1 id="前日谈">前日谈</h1><p>今天与 <ins>T 卿</ins>闲聊到高三时她班上有人因压力过大精神出现问题的往事，这才想到自己虽然不熟，却也是认识这样一号人物的。虽然事情不大不小，但是的确为高三的生活带来了一个相当有意思的插曲，遂产生了为其立传的想法。</p><p>为避其名讳，我就姑且称她为<ins>贺卿</ins>。<ins>贺卿</ins>身材中等，身高大约一米六，不戴眼镜。初次了解到她是在某教育机构的数学课上，<ins>贺卿</ins>正排在我前面请教老师一道构造原函数的数学题，我只记得当时她正与老师兴致勃勃地讲着自己是哪里哪里不会，又把答案拿出来答案给老师描述答案是如何如何做，老师听了，又翻了翻答案，于是大笑起来：</p><blockquote><p>“这样构造原函数，谁想得到？分明就是上帝视角……”</p></blockquote><p>一边询问我的意见，我则确实没有认真听他们到底在讨论些什么（雾），只能应付过去。现在想起来，她不过和我一样是一个再正常不过的天朝高中生而已。</p><hr><h1 id="贺卿">贺卿</h1><p>我后来没有去教育机构上课了，也就再也没有听过她的消息，也没有关注过了。</p><p>故事并没有完结。说起来，一切的转机是某天<ins>胡君</ins>收了一封神秘的来信，信中满是爱慕的话语。字迹工整，写在精选的信纸上，或许还附有一些见面礼（不太记得了），东西在无人的时刻放到了<ins>胡君</ins>的座位上。这样的精细程度，让人第一时间就排除了朋友之间恶作剧的可能性，于是大家都起哄起来。我也凑过去，看到落款是一个姓<ins>杨</ins>的（为避名讳，下称<ins>杨卿</ins>）女名，这个名字貌似对我们甚至对<ins>胡君</ins>都是闻所未闻的，实在让人可疑，不过大家也期望着事情会如何继续发展。</p><p>之后<ins>杨卿</ins>确实也又趁教室没人的中午或晚上来给<ins>胡君</ins>送信，送小礼物，有很多次都被目击到。事情也越传越开，不出意料也传到<ins>杨卿</ins>班上去了。于是我们两个班一通气，才知道不得了的事情。</p><p>该班确实有一个<ins>杨卿</ins>，但此人与事件毫无关系，而是另一个人冒用其名字给<ins>胡君</ins>写信，送礼物，而这个人居然就是<ins>贺卿</ins>。</p><p>有一天吃完晚餐我早早回到教室休息，就看到一个女生幽幽地从后门进来，走到<ins>胡君</ins>座位边上放了东西，又幽幽地出门去了，因为我是见过<ins>贺卿</ins>的脸的，这才让我确信了<ins>贺卿</ins>和“<ins>杨卿</ins>”真的是一个人。</p><p>后来慢慢地大家都知道了她有这样一种精神类疾病，在发作的时候会认为自己是同班的<ins>杨卿</ins>，写下这些信的时候，大概也是处于这种状态下吧。据称她曾在课上发作，还辱骂过真正的<ins>杨卿</ins>，具体情形已不可考，不过我想这对<ins>杨卿</ins>来说一定非常恐怖。毕竟如同自己的灵魂被夺走了一半一样，更何况时不时出现的“另一个自己”还要跟本人争抢这个名字。</p><p>也许<ins>贺卿</ins>的“<ins>贺</ins>”人格也知道了大家发现她不是<ins>杨卿</ins>这件事，便在接下来的信给<ins>胡君</ins>中坦白了自己的精神问题，说“无法控制<ins>杨卿</ins>的出现”，“自己的人格要做斗争”，“仍然喜欢”之类的话，并明确落款为“<ins>贺卿</ins>”。这倒是很吓人了：倘若是所谓“<ins>杨卿</ins>”对<ins>胡君</ins>有好感的话，那其实反而可以借由疾病的理由忽视掉，而这封信的出现倒让人不得不去正视一个真实存在的人的心意，对于<ins>胡君</ins>来说，这一堆落款不同的信和小礼物，想必是头疼不已了。</p><p>然而这种关系很明显是不会有任何结果的。<ins>贺卿</ins>（或“<ins>杨卿</ins>”？不清楚）后来又给另外一位<ins>龙君</ins>写了一封情书，属实是把我们都吓得不轻。要知道倘若一直没有回音，她搞不好要给每个人写一封情书了。不过自此之后到高考结束，她再也没有任何动静，我们也专心于高考而淡忘了这件事。</p><p>24 年 9 月，已经毕业三个月了，她突然通过 QQ 短视频（wtf?）加了我 QQ。且不带任何备注前来。我礼貌发问：</p><blockquote><p>“请问你是？”</p></blockquote><p>隔天，她回复了自己的姓名（<ins>贺</ins>）。说真的，我心里立刻慌乱起来，便诚惶诚恐，战战兢兢地问她有何贵干，而得到的答复只是“加着玩”，于是我提着的心放下来，再也没有打开过这个聊天窗口。</p><p>我并不清楚她是否知道我的名字，也不知道她是否治好了这个病。不过她加我时是以<ins>贺</ins>的身份来的，我倒希望她已经回归正常生活了。</p><hr><h1 id="后日谈">后日谈</h1><p>与 <ins>T 卿</ins>闲聊的时候我才想到还有<ins>贺卿</ins>的 QQ，于是说要截聊天记录给她看，之后出于好奇点开<ins>贺卿</ins>主页一看，发现在不知什么时候她已经把 QQ 给注销了。<ins>贺卿</ins>永远从我的人际关系中消失了。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E5%AD%A4%E7%8D%A8%E6%98%9F%E7%90%83/">孤獨星球</category>
      
      
      <category domain="https://samuflore.top/tags/Biography/">Biography</category>
      
      
      <comments>https://samuflore.top/posts/90dbc4f6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P0]P0 上机之思考</title>
      <link>https://samuflore.top/posts/18246a69/</link>
      <guid>https://samuflore.top/posts/18246a69/</guid>
      <pubDate>Mon, 13 Oct 2025 13:14:40 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;今天非常惊险地通过了 P0 上机（实话说 P0 挂了就招笑了&lt;br&gt;
但是还是非常难过，在错误的地方浪费了大量时间。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>今天非常惊险地通过了 P0 上机（实话说 P0 挂了就招笑了<br>但是还是非常难过，在错误的地方浪费了大量时间。</p><span id="more"></span><hr><h1 id="第一题">第一题</h1><h2 id="题干">题干</h2><p>第一题的大致题意是搭建一个 Moore 机，实现下述功能：</p><p>串行输入一个数列，每个 5 位宽，若当前输入的数<ins>严格大于</ins>前一个数，则称为一次“起”，若<ins>严格小于</ins>则称为一次“伏”。若最后四个输入满足“起 起 伏 起”的情况，则输出为 1。</p><p>识别是循环的，比如一个“起 起 伏 起”的最后一个起可以当作下一个“起 起 伏 起”的第一个“起”，如“起 起 伏 起 起 伏 起”中第 4 个“起”和第 7 个 “起”要输出 1。</p><p>初始情况下或者异步复位后，数列的第 0 个元素 a<sub>0</sub> 为 <code>5'd7</code>。</p><h2 id="感悟">感悟</h2><p>这题的核心在于怎么实现这个初始的 <code>5'd7</code>。<br>很明显我得用一个寄存器去保存上一个输入的数。一开始我选择用寄存器初始化的方法去给这个寄存器初始化一个 <code>5'd7</code>，但是这显然错了，耽误了我很多分钟的时间（。</p><p>这个 <code>5'd7</code> 可以说是要以一种“异步初始化”的形式来实现，而我所掌握的是同步初始化。什么意思呢？现有的初始化方法只能当时钟上升沿到来时才给寄存器赋初值。也就是说当第一个时钟周期来时寄存器才变成 <code>5'd7</code>，但是按理说这时候应该存入此时输入的值了，也就是 a<sub>1</sub>，所以这根本不对。</p><p>（补丁）我的老天，发现早已有大佬给出了“异步初始化”的方法，其实只要在同步的基础上略微改动即可。</p><p><img src="/posts/18246a69/immediately.png" alt="“异步初始化”"></p><p>我采用的是笨办法，直接在设计状态的时候把初始状态编了一个状态码，如果下一个输出大于 <code>5'd7</code> 就转到下一个状态——一个“起”，与此同时还设计了一个 invalid 状态接受所有不符合“起 起 伏 起”的输入，比如“伏”完又“伏”，或者只有一个“起”就“伏”之类的，当出现一个“起”时，invalid 也转到一个“起”的状态……<br>这样状态有点多，也有点混乱，现在想来我觉得并不好。</p><p>看群里大佬说可以用一个 MUX 来控制当前数是和寄存器出来的数比大小还是和 <code>5'd7</code> 比大小，我觉得非常好，实在太强了orz。<br>具体来说，可以搞一个 最大值为 2 的计数器，设置其达到最大值后保持不变，把 carry 端连到 MUX 的选择信号端。第一个上升沿到来时选择 <code>5'd7</code>，之后的上升沿到来时选择寄存器出来的值。</p><p>太巧妙了orz…</p><hr><h1 id="第二题">第二题</h1><h2 id="题干-2">题干</h2><p>搭建一个 Mealy 机，实现下述功能：</p><p>通过输入 op（操作符）和 operant（操作数），算出值保存到寄存器中。由于是 Mealy 机，记得要异步输出结果。</p><p>2 位宽的输入 op，各种输入含义如下：</p><ul class="lvl-0"><li class="lvl-2"><p>00：同步复位</p></li><li class="lvl-2"><p>01：将当前值逻辑左移一位，再加上操作数。</p></li><li class="lvl-2"><p>10：将当前值逻辑左移一位，再减去操作数。</p></li><li class="lvl-2"><p>11：将当前值逻辑左移一位，与操作数按位异或。</p></li></ul><h2 id="感悟-2">感悟</h2><p>这题较简单，记得是 Mealy 机要异步输出就行。</p><hr><h1 id="第三题">第三题</h1><h2 id="题干-3">题干</h2><p>题目假设有一个可以无限上人的电梯，运行在 4 层楼间（0，1，2，3），从一个给定的楼层 <code>from</code> 处开始运行。四层楼都有人要乘电梯，人数各不相同。电梯按照<ins>从人多到人少</ins>的顺序去接客，要设计一个组合电路计算电梯接下所有客人时总共经过了多少层楼。因电梯从 <code>from</code> 处开始运行，故 <code>from</code> 楼的客人立刻上电梯。<br>从 n 楼运行到 m 楼经过的楼层是 |m - n|。</p><h2 id="感悟-3">感悟</h2><p>因为第一题花费太多时间导致我没能在上机的时候完成这题（悲</p><p>隔天来看，这题其实还是有难度的。难点在于如何实现从人多到人少的运行顺序。我采用的方法是冒泡排序，在只有 4 个输入的时候还是非常好用的。接下来一个问题是如何把人数和楼层数绑定，排序肯定只针对于楼层的人数。我又采用了一个笨办法，排完序之后每个值和输入的四个值挨个比较，如果相等就代表楼层号是这个（</p><p>最后绝对值的实现可以用 Subtractor 和 Negator 实现。Subtractor 有一个端口用来监控减法是否得到负数，如果为负数，用一个 MUX 选择差的相反数即可。</p><p>还有一点要注意就是 Comparator 的比较方法，要依题目选定是无符号比较还是补码比较。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/Logisim/">Logisim</category>
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P0/">P0</category>
      
      
      <comments>https://samuflore.top/posts/18246a69/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P0]关于 Mealy 机和 Moore 机的思考</title>
      <link>https://samuflore.top/posts/11653afb/</link>
      <guid>https://samuflore.top/posts/11653afb/</guid>
      <pubDate>Sun, 05 Oct 2025 09:24:33 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;完成 P0 课下内容后，我对 Logisim 中完成两种有限状态机的方法以及其区别有了一些见解。&lt;br&gt;
&lt;a href=&quot;https://samuflore.top/posts/e7ebcfa7/&quot;&gt;前情提要&lt;/a&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>完成 P0 课下内容后，我对 Logisim 中完成两种有限状态机的方法以及其区别有了一些见解。<br><a href="https://samuflore.top/posts/e7ebcfa7/">前情提要</a>。</p><span id="more"></span><p>两种状态机都有“状态转移”、“状态存储”和“输出电路”三部分构成。且“状态转移”和“输出电路”是<ins>组合逻辑</ins>实现，而“状态存储”是<ins>时序逻辑</ins>实现。</p><hr><h1 id="Moore-机">Moore 机</h1><p><img src="/posts/11653afb/Moore.svg" alt="Moore Machine"></p><p>Moore 机的输出不和输入直接挂钩，是根据当前状态来决定是否输出的。换言之，我们应当把状态储存的值提取出来，然后通过一个输出逻辑来生成我们期待的输出值。</p><p>这其实隐含了一个信息：状态存储是时序逻辑（一般来说我们用寄存器存储状态编码），其更新通常来说是在时钟上升沿发生的，这就导致了在时钟上升沿（或题指定的时刻）其输出给输出电路的值发生改变，从而最后得到的结果改变。简单来说，输出结果的更新发生在时钟上升沿（或给定时刻）。</p><hr><h1 id="Mealy-机">Mealy 机</h1><p><img src="/posts/11653afb/Mealy.svg" alt="Mealy Machine"></p><p>Mealy 机的输出与当前输入直接挂钩。输入和当前状态储存的内容共同决定了输出的结果。而且是即时生效，因为组合逻辑不会根据时钟的变化来变化。</p><hr><h1 id="时间差">时间差</h1><p>根据以上的分析，Moore 机和 Mealy 机通常会有时间差。比如下面这个例子：<br>当前状态为 S1，若输入为 In，则状态转为 S2，当状态为 S2，输出 Out 置为 1。</p><ul class="lvl-0"><li class="lvl-2"><p>Moore 机中，它是这样的：</p><ul class="lvl-2"><li class="lvl-6">当前状态 S1；</li><li class="lvl-6">第一个上升沿，检测到输入为 In，状态转为 S2；</li><li class="lvl-6">因为状态是 S2，所以输出 Out 置为 1；</li></ul></li><li class="lvl-2"><p>Mealy 机中，它是这样的：</p><ul class="lvl-2"><li class="lvl-6">当前状态 S1；</li><li class="lvl-6">不论当前是不是上升沿，检测到输入为 In，输出置为 1；</li><li class="lvl-6">第一个上升沿，若输入还是 In，状态转为 S2；</li></ul></li></ul><p>也就是说 Mealy 机给人的直观感受就是“提前”了一周期，明明还是状态 S1，却将输出置为 1 了？</p><p>其实并不是这样一回事，Mealy 机好比有“预判”的功能，如果当前已经是 S1，且输入是 In，它就知道接下来势必变成 S2，因此“预判”了上升沿到来时状态存储的结果，并将输出置为 1。换言之，S2 对于 Mealy 机都是可有可无的，它根本不关心 S1 会不会变成 S2，因为该输出的时候早已经输出了。<br>可以理解成 Mealy 机的输出和时钟是异步的。</p><p>Moore 机则不然。就算知道了当前输入是 In，也得等到下一个周期更新完状态，才能通过输出电路去输出结果。<br>可以理解成 Moore 机的输出和时钟是同步的。</p><h1 id="四不像机">四不像机</h1><p>然而我今天画了一个四不像出来。<br>在状态转移电路中，我的输出端自作多情的添加了一个 <code>isOut</code> 含义的端口。什么意思呢？就是根据输入和当前状态，我直接指定了 <code>Out</code> 端口要不要置为 1。还是上面的例子，就好比我的状态转移电路是这样：</p><ul class="lvl-0"><li class="lvl-2"><p>如果当前状态是 S1，且输入是 In，则状态转为 S2，并告诉 <code>Out</code> 要输出 1。</p></li></ul><p>然后我把 <code>isOut</code> 和 <code>Out</code> 直接相连了。</p><p>那么这是什么机呢？看似 <code>Out</code> 并没有直接和输入挂钩，可是事实并非如此。我们仍然一步一步分析：</p><ul class="lvl-0"><li class="lvl-2"><p>当前状态是 S1，输入是 In。</p></li><li class="lvl-2"><p>状态转移电路是组合逻辑，因此无论现在是什么时刻，它读入了当前状态 S1，以及输入 In，然后它想，“哦，现在我要立刻输出 S2，并把 <code>isOut</code> 置为 1。”</p></li><li class="lvl-2"><p>S2 朝着“状态存储”去了，但是不知道现在是不是时钟上升沿，因此其有没有进入寄存器，我们不知道。</p></li><li class="lvl-2"><p>但是 <code>isOut</code> 直接连着 <code>Out</code>，于是 <code>Out</code> 被置为 1 了。</p></li></ul><p>仔细一想，这不是 Mealy 机的形式吗？输出和时钟异步。但是 <code>Out</code> 却没有和输入直接相连，而是隐式地通过 <code>isOut</code> 这个端口相连了。正如前面所说，<code>isOut</code> 起到了“预判”的作用，而这正是 Mealy 机的特点。</p><p>如果我希望当前状态更新为 S2 再输出，有办法么？</p><p>自然是有的，我们需要将输出强制与时间同步。也就是说不能让 <code>isOut</code> 直接与 <code>Out</code> 相连了。</p><p>最简单的办法是弄一个寄存器，<code>isOut</code> 做输入，输出给 <code>Out</code>，然后用时钟驱动。这样如果 <code>isOut</code> 被置为 1，这个信号会因为寄存器的原因被强行滞留到下一个上升沿到来时，然后进入寄存器并立即传给 <code>Out</code>。</p><p>再来想想这是否是正确的：</p><ul class="lvl-0"><li class="lvl-2"><p>当前状态是 S1，输入是 In。</p></li><li class="lvl-2"><p>状态转移电路是组合逻辑，因此无论现在是什么时刻，它读入了当前状态 S1，以及输入 In，然后它想，“哦，现在我要立刻输出 S2，并把 <code>isOut</code> 置为 1。”</p></li><li class="lvl-2"><p>S2 在下一个时钟上升沿到来之前都不会进入寄存器并更新状态，与此同时 <code>isOut</code> 在下一个时钟上升沿到来之前也不会进入寄存器传递给 <code>Out</code>。</p></li><li class="lvl-2"><p>时钟上升沿到来了，然后 S2 进入了寄存器完成状态转移，同时 <code>Out</code> 置为 1。</p></li></ul><p>看来确实解决问题了，不过这样真的就把整个电路变成“四不像”机了。最正确的做法是不要搞什么 <code>isOut</code>，直接用“状态存储”的输出值来判断要不要将 <code>Out</code> 置为 1。这样就能正确地完成 Moore 机了。如果要的是 Mealy 机，最好把输入和“状态存储”的输出值直接相连，用一个逻辑来判断，以免混淆。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/Logisim/">Logisim</category>
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/Finite-State-Machine/">Finite State Machine</category>
      
      <category domain="https://samuflore.top/tags/Mealy-Machine/">Mealy Machine</category>
      
      <category domain="https://samuflore.top/tags/Moore-Machine/">Moore Machine</category>
      
      <category domain="https://samuflore.top/tags/P0/">P0</category>
      
      
      <comments>https://samuflore.top/posts/11653afb/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SamuFlore&#39;s Dimension</title>
    <link>https://samuflore.top/</link>
    
    <atom:link href="https://samuflore.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一人倒、衆人倒。</description>
    <pubDate>Tue, 21 Oct 2025 04:09:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[CO P1]P1 上机之思考</title>
      <link>https://samuflore.top/posts/fae59a6c/</link>
      <guid>https://samuflore.top/posts/fae59a6c/</guid>
      <pubDate>Mon, 20 Oct 2025 16:16:11 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;水平太差了。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>水平太差了。</p><span id="more"></span><hr><h1 id="第一题">第一题</h1><h2 id="题干">题干</h2><p>第一题是一个组合逻辑的运用。给出一个位宽为 36 的输入 a ，代表一个 6 x 6 的矩阵。再给出一个位宽为 9 的输入  ，代表一个 3 x 3 的卷积核。要求输出一个位宽为 16 的输出 ans ，代表卷积后的 4 x 4 的矩阵。卷积的具体算法也给出了。由于输入是从低到高依次填入矩阵，所以矩阵元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>×</mo><mi>n</mi><mo>+</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M[i][j] = {a_{i \times n + j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span>。</p><p>总的来说，第一题只要照葫芦画瓢即可。</p><hr><h1 id="第二题">第二题</h1><h2 id="题干-2">题干</h2><p>一个应用题类型的题。有一个 op 输入，表示四种操作。分别是往一个长度 128 的数组最低位添加元素（原有元素往高位移动 1 位）、读取指定位的元素、统计某元素的个数、以及保持上一周期输出。</p><h2 id="思考">思考</h2><p>光看题干其实这题并不难，但是需要掌握很多东西才能做。首先是 Verilog 中数组的定义：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt; &lt;位宽声明&gt; &lt;数组名&gt; &lt;长度声明&gt;;</span><br></pre></td></tr></table></figure><p>其中长度声明和位宽声明一样是 <code>[高位:低位]</code>。访问元素直接用下标即可。</p><p>然后是给数组初始化，在 <code>initial</code> 块和 <code>reset</code> 触发时，用 <code>for</code> 循环完成。在 <code>reset</code> 触发时，记得使用非阻塞赋值。</p><div class="note warning">            <p>直到这时我才知道 <code>initial</code> 块应当被归类到组合逻辑中，使用阻塞赋值。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i = i + <span class="number">1</span>)</span><br><span class="line">    array[i] = <span class="number">3&#x27;b000</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>          </div><p>题目的关键在于统计某元素的个数。如果说在时序逻辑块里面写这样的代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] cnt &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">127</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (array[i] == query) cnt &lt;= cnt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这就错了。考虑某一上升沿，开始执行这一部分代码。cnt 初始化为 0。当满足 if 条件，cnt 为 0 的快照在赋值语句右侧，也就是 cnt = cnt(为0) + 1。只有当 always 完全结束，右侧才会赋给左侧。但 for 循环仍在继续，第二次满足 if 条件，又执行 cnt = cnt(为0) + 1，因此 for 循环无论执行多少次，等 always 结束，cnt 只会变成 1。再次执行 always，再次执行 for，再次结束后，cnt 会变成 2（如果 if 还能满足的话）。宏观上，这表现为 cnt 每个上升沿 + 1，而非一次性得到 cnt 真正的值。</p><p>有两种解决方案：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（换成阻塞赋值）</span></span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">127</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (array[i] == query) cnt = cnt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="comment">//（另开一个组合逻辑块）</span></span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">127</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (array[i] == query)</span><br><span class="line">            cnt = cnt + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h1 id="第三题">第三题</h1><h2 id="题干-3">题干</h2><p>设计一个 Moore 机，对一个 json 序列进行有效性检测并统计键值对数量。每个周期内，串行输入 json 序列的一个字符。<br>json 的格式已简化如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span><span class="string">&quot;value2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;key3&quot;</span><span class="punctuation">:</span><span class="string">&quot;value3&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>中间不会有任何空白字符。</p><p>对于所有输入的 json 序列，都满足以下格式规范：</p><ul class="lvl-0"><li class="lvl-2"><p>每个 json 序列以左大括号 “{” 为开始，以右大括号 “}” 为结束。内部不包含嵌套大括号。</p></li><li class="lvl-2"><p>每个 json 序列内部由不定组键值对组成，每组键值对之间用逗号 “,” 隔开。可以没有键值对，也可以有多组键值对。最多包含 255 组键值对。</p></li><li class="lvl-2"><p>键值对的格式严格符合 <code>&quot;key&quot;:&quot;value&quot;</code> 。其中内部的 <code>key</code> 和 <code>value</code> 可被替换且至少有一个字符（不为空字符串），例如 <code>&quot;test&quot;:&quot;CO&quot;</code> 。字符串由大小写字母和数字组成，不包含嵌套双引号，长度最多为 15 个字符。</p></li><li class="lvl-2"><p>相邻两个 json 序列间用若干个空格隔开（可以没有空格）。例如 <code>&#123;&quot;fruit&quot;:&quot;apple&quot;&#125; &#123;&#125;&#123;&quot;animal&quot;:&quot;cat&quot;&#125;</code> 。</p></li></ul><p>输出介绍：</p><ul class="lvl-0"><li class="lvl-2"><p><code>cur_num</code>: 输出当前 json 序列的键值对数目。具体的，在每个 json 序列输入完毕的下一个时钟上升沿更新该 json 序列中的键值对数目。</p></li><li class="lvl-2"><p><code>max_num</code>: 输出历史输入的 json 序列的键值对数目的最大值。具体的，每次 <code>cur_num</code> 更新时，同步更新 <code>max_num</code> 为历史所有 <code>cur_num</code> 中的最大值。</p></li></ul><p>特别情况：</p><ul class="lvl-0"><li class="lvl-2"><p>正常情况下 json 序列键值对中的字符串不为空，即至少有一个字符。</p></li><li class="lvl-2"><p>若 json 序列键值对中的字符串出现空串，即 <code>&#123;&quot;&quot;:&quot;value&quot;&#125; 或 &#123;&quot;key&quot;:&quot;&quot;&#125;</code> ，则该 json 序列为无效序列，其 <code>cur_num</code> 视为 <code>8'd0</code> 。 json 序列为有效序列当且仅当内部所有键值对的字符串都不是空串。</p></li><li class="lvl-2"><p>除了上述情况外，不会出现其他非法情况。即输入的 json 序列只有两种：1. 合法 json 序列，所有键值对的字符串均不为空串。 2. 无效 json 序列，至少有一个字符串是空串。</p></li></ul><h2 id="思考-2">思考</h2><p>这题要求多，状态也多。在输入 “{” 时，要考虑下一个是 “}” 的情况。这时需输出 <code>cur_num</code> 为 0，<code>max_num</code> 不变。如果输入左引号后接着输入右引号，那么整个 json 都是无效的，在输入 “}” 后同样 <code>cur_num</code> 为 0，<code>max_num</code> 不变。</p><p>在更新 <code>max_num</code> 的时候我遇到了问题。按理说，对于时序逻辑，我们必须避免使用阻塞赋值。但是此处我却不得不用上它：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num &lt;= cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cur_num &gt; max_num) max_num &lt;= cur_num;</span><br></pre></td></tr></table></figure><p>倘若要更新 <code>max_num</code>，问题就出现了。非阻塞赋值把 <code>cur_num</code> 做一个快照，然后赋给 <code>max_num</code>。也就是说 <code>max_num</code> 拿到的是 <code>+ 1</code> 前的 <code>cur_num</code>，导致出现延迟。倘若要实现理想的效果，则需要改为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num = cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cur_num &gt; max_num) max_num = cur_num;</span><br></pre></td></tr></table></figure><p><code>isInvalid</code> 用来标志该 json 串是否为空串或异常串。</p><p>这的确是对的。</p><p>不过我们还是遵从代码规范吧，不要用阻塞赋值，于是我改了这样一版：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num &lt;= cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cur_num &gt; max_num) max_num &lt;= cur_num + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这根本不对。我们就假设 <code>cur_num = 0</code>，<code>max_num = 0</code> 好了。现在我要把 <code>cur_num + 1</code>，然后赋给 <code>max_num</code>。但是由于非阻塞赋值的原因，在 if 条件比较的时候比的是两个 0，也就是说条件都进不去。</p><p>这时候读者朋友肯定要说了：“你把条件改成 <code>cur_num &gt;= max_num</code> 不就行了？”诶，事实证明，这其实还是错的。如果我的 <code>max_num = 0</code>，然后碰到一个空串会怎样呢？首先 <code>isInvalid = 1</code>，进入 <code>else cur_num &lt;= 0</code> 的条件。<code>cur_num</code> 都是 0 了，那肯定不需要更新 <code>max_num</code> 了。然而，<code>max_num</code> 拿到的是之前的快照，甚至还 <code>+ 1</code>，这下更不更新就不好说了。所以最正确的写法是：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isInvalid) cur_num &lt;= cur_num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cur_num &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!isInvalid &amp;&amp; (cur_num &gt; max_num)) max_num &lt;= cur_num + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这题作为一个有限状态机的题，确实略微复杂，特别是需要深刻理解阻塞赋值和非阻塞赋值的差异。如果抛弃实用性来说，只要知道自己为什么要用阻塞赋值，在时序逻辑中使用是可以理解的。然而实用性大于天，所以还是用非阻塞吧~</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P1/">P1</category>
      
      <category domain="https://samuflore.top/tags/Verilog/">Verilog</category>
      
      
      <comments>https://samuflore.top/posts/fae59a6c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MD 样式测试</title>
      <link>https://samuflore.top/posts/937d20ea/</link>
      <guid>https://samuflore.top/posts/937d20ea/</guid>
      <pubDate>Mon, 20 Oct 2025 06:02:30 GMT</pubDate>
      
      <description>&lt;div class=&quot;center&quot;&gt;
&lt;h1 id=&quot;Twinkle-Twinkle-Little-Star&quot;&gt;Twinkle, Twinkle, Little Star&lt;/h1&gt;
&lt;div class=&quot;right&quot;&gt;
&lt;p&gt;——Jane Taylor&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Twinkle, twinkle, little star,&lt;/p&gt;
&lt;p&gt;How I wonder what you are!&lt;/p&gt;
&lt;p&gt;Up above the world so high,&lt;/p&gt;
&lt;p&gt;Like a diamond in the sky.&lt;/p&gt;
&lt;p&gt;When the blazing sun is gone,&lt;/p&gt;
&lt;p&gt;When he nothing shines upon,&lt;/p&gt;
&lt;p&gt;Then you show your little light,&lt;/p&gt;
&lt;p&gt;Twinkle, twinkle, all the night.&lt;/p&gt;
&lt;p&gt;Then the traveller in the dark,&lt;/p&gt;
&lt;p&gt;Thanks you for your tiny spark,&lt;/p&gt;
&lt;p&gt;He could not see which way to go,&lt;/p&gt;
&lt;p&gt;If you did not twinkle so.&lt;/p&gt;
&lt;p&gt;In the dark blue sky you keep,&lt;/p&gt;
&lt;p&gt;And often thro’ my curtains peep,&lt;/p&gt;
&lt;p&gt;For you never shut your eye,&lt;/p&gt;
&lt;p&gt;Till the sun is in the sky.&lt;/p&gt;
&lt;p&gt;&#39;Tis your bright and tiny spark,&lt;/p&gt;
&lt;p&gt;Lights the trav’ller in the dark,&lt;/p&gt;
&lt;p&gt;Tho’ I know not what you are,&lt;/p&gt;
&lt;p&gt;Twinkle, twinkle, little star.&lt;/p&gt;
&lt;/div&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div class="center"><h1 id="Twinkle-Twinkle-Little-Star">Twinkle, Twinkle, Little Star</h1><div class="right"><p>——Jane Taylor</p></div><p>Twinkle, twinkle, little star,</p><p>How I wonder what you are!</p><p>Up above the world so high,</p><p>Like a diamond in the sky.</p><p>When the blazing sun is gone,</p><p>When he nothing shines upon,</p><p>Then you show your little light,</p><p>Twinkle, twinkle, all the night.</p><p>Then the traveller in the dark,</p><p>Thanks you for your tiny spark,</p><p>He could not see which way to go,</p><p>If you did not twinkle so.</p><p>In the dark blue sky you keep,</p><p>And often thro’ my curtains peep,</p><p>For you never shut your eye,</p><p>Till the sun is in the sky.</p><p>'Tis your bright and tiny spark,</p><p>Lights the trav’ller in the dark,</p><p>Tho’ I know not what you are,</p><p>Twinkle, twinkle, little star.</p></div><span id="more"></span><p><ruby>中国<rt>zhōng guó</rt></ruby></p><p><ruby>你好世界<rt>HelloWorldNihaoShijie这是中文</rt></ruby></p><p>VuePress Theme Hope <span class="spoiler">十分强大</span>。</p><p>Euler’s identity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>π</mi></mrow></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">e^{i\pi}+1=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.908em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">iπ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> is a beautiful formula in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>.</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><msup><mi mathvariant="normal">∂</mi><mi>r</mi></msup><mrow><mi mathvariant="normal">∂</mi><msup><mi>ω</mi><mi>r</mi></msup></mrow></mfrac><mrow><mo fence="true">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence="true">)</mo></mrow><mrow><mo fence="true">{</mo><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mi>r</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>I</mi></msup><mi>r</mi><mo>⋯</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mrow><mi>r</mi><mi>i</mi></mrow></msup></mrow><msup><mi>ω</mi><mi>i</mi></msup></mfrac><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^ Ir \cdots (r-i+1) (\log y)^{ri}} {\omega^i} \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0277em;vertical-align:-1.2777em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span></span></span></span></span><p>NH<sub>4</sub><sup>+</sup></p><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox2"><label for="checkbox2">这个任务还没做</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">这个任务做完了</label></p></li></ul><p><mark>我是高亮文本</mark></p><p>Here is a simple footnote<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>A footnote can also have multiple lines<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p><div class="wenyan"><div class="center"><h1 id="滕Teng王Wang閣Ge序Xu"><ruby>滕<rt>Teng</rt></ruby><ruby>王<rt>Wang</rt></ruby><ruby>閣<rt>Ge</rt></ruby><ruby>序<rt>Xu</rt></ruby></h1><h2 id="一">一</h2></div><p>豫章故郡，洪都新府。星分翼轸(zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃(fān)之榻。雄州雾列，俊采星驰，台隍(huáng)枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨(qǐ)戟遥临；宇文新州之懿(yì)范，襜(chān )帷(wéi)暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电清霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。<br>时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨(yǎn)骖騑(cān fēi)于上路，访风景于崇阿(ē)。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流（一作 翔）丹，下临无地。鹤汀（tīng）凫(fú )渚（zhǔ），穷岛屿之萦(yíng)回；桂殿兰宫，即（一作 列）冈峦之体势。</p></div><div class="wenyan"><div class="center"><h2 id="二">二</h2><div class="center"><p>披绣闼（tà），俯雕甍(méng )。山原旷其盈视，川泽纡(yū)其骇瞩。闾(lǘ)阎(yán) 扑地，钟鸣鼎食之家；舸（gě)舰弥津，青雀黄龙之舳（zhú）。云销雨霁(jì)，彩彻区明（或作 虹销雨霁，彩彻云衢 qú）。落霞与孤鹜(wù)齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（l ǐ）之滨；雁阵惊寒，声断衡阳之浦。<br>遥襟甫畅，逸兴遄(chuán)飞。爽籁发而清风生，纤歌凝而白云遏(è)。睢(suī)园绿竹，气凌彭泽之樽；邺(yè)水朱华，光照临川之笔。四美具，二难并。穷睇眄(dì miǎn)于中天，极娱游于暇日。天高地迥(jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会（kuài）于云间。地势极而南溟(míng)深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍(hūn)而不见，奉宣室以何年。</p></div></div></div><div class="wenyan"><div class="center"><h2 id="三">三</h2></div><p>嗟(jiē)乎！时运不齐，命途多舛(chuǎn)；冯唐易老，李广难封。屈贾谊（yì）于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊（shē），扶摇可接；东隅(yú)已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！<br>勃，三尺微命，一介书生。无路请缨，等终军之弱冠（guàn）；有怀投笔，慕宗悫（què）之长风。舍簪（zān）笏（hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨(tāo)陪鲤对；今兹捧袂(mèi)，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？<br>呜呼！胜地不常，盛筵(yán)难再；兰亭已矣，梓(zǐ) 泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。</p></div><div class="wenyan"><div class="center"><h1 id="蜀道難SHU-DAO-NAN"><ruby>蜀道難<rt>SHU DAO NAN</rt></ruby></h1></div><div class="right"><p>唐 李白</p></div><p>噫吁嚱，危乎高哉！蜀道之難，難於上青天！蠶叢及魚鳧，開國何茫然！爾來四萬八千歲，不與秦塞通人煙。西當太白有鳥道，可以橫絕峨眉巔。地崩山摧壯士死，然後天梯石棧相鈎連。上有六龍回日之高標，下有沖波逆折之回川。黃鶴之飛尚不得過，猿猱欲度愁攀援。青泥何盤盤，百步九折縈巖巒。捫參歷井仰脅息，以手撫膺坐長歎。<br>問君西遊何時還？畏途巉巖不可攀。但見悲鳥號古木，雄飛雌從繞林間。又聞子規啼夜月，愁空山。蜀道之難，難於上青天，使人聽此凋朱顔！連峯去天不盈尺，枯松倒掛倚絕壁。飛湍瀑流爭喧豗，砯崖轉石萬壑雷。其險也如此，嗟爾遠道之人胡為乎來哉！<br>劍閣崢嶸而崔嵬，一夫當關，萬夫莫開。所守或匪親，化為狼與豺。朝避猛虎，夕避長蛇；磨牙吮血，殺人如麻。錦城雖云樂，不如早還家。蜀道之難，難於上青天，側身西望長谘嗟！</p></div><h1 id="1">1</h1><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>My reference. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>To add line breaks within a footnote, prefix new lines with 2 spaces.<br>This is a second line <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      
      
      <comments>https://samuflore.top/posts/937d20ea/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P1]如何优雅地写 Testbench</title>
      <link>https://samuflore.top/posts/2dab591c/</link>
      <guid>https://samuflore.top/posts/2dab591c/</guid>
      <pubDate>Sun, 19 Oct 2025 15:15:17 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;学习自&lt;a href=&quot;https://roife.github.io/posts/buaa-co-lab-p1/&quot;&gt;ROIFE BLOG&lt;/a&gt;。&lt;/p&gt;
          &lt;/div&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><div class="note info">            <p>学习自<a href="https://roife.github.io/posts/buaa-co-lab-p1/">ROIFE BLOG</a>。</p>          </div><span id="more"></span><hr><p>倘若我们要串行输入很长一个字符串，你是否还在一行一行写 <code>#10 in = &quot;xxx&quot;;</code>而感到心力交瘁？你是否因为修改输入要一个字符一个字符改而烦闷？如果是的话，你最好学习一下我从大佬那学来的招数：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">0</span>:<span class="number">1023</span>] S = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">while</span>(!S[<span class="number">0</span>:<span class="number">7</span>]) S = S &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(; S[<span class="number">0</span>:<span class="number">7</span>]; S = S &lt;&lt; <span class="number">8</span>) <span class="keyword">begin</span></span><br><span class="line">      in = S[<span class="number">0</span>:<span class="number">7</span>];</span><br><span class="line">      #<span class="number">5</span>; <span class="comment">//间隔时间</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>看，大佬就是大佬，位宽声明都选择小数在前大数在后的做法。如果你和我一样是彩笔，这还有等价的常规写法：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">1023</span>:<span class="number">0</span>] S = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">while</span>(!S[<span class="number">1023</span>:<span class="number">1016</span>]) S = S &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(; S[<span class="number">1023</span>:<span class="number">1016</span>]; S = S &lt;&lt; <span class="number">8</span>) <span class="keyword">begin</span></span><br><span class="line">      in = S[<span class="number">1023</span>:<span class="number">1016</span>];</span><br><span class="line">      #<span class="number">5</span>; <span class="comment">//间隔时间</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>考察第一种写法。由于位宽声明为 <code>[0:1023]</code>，则 0 是高位，1023是低位。<code>abcd</code> 从低到高存储，<code>d</code> 是 1023-1016 位，<code>c</code> 是 1015-1008 位，以此类推。之后整个 <code>S</code> 是这样的：</p><p><code>0000......abcd</code></p><p>接着左移至不为 0 的位置，<code>S</code> 变成：</p><p><code>abcd......0000</code></p><p>循环取出前 8 位，直至整个 <code>S</code> 为 0，就可以遍历 <code>S</code> 中的字符串了。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/P1/">P1</category>
      
      <category domain="https://samuflore.top/tags/Verilog/">Verilog</category>
      
      <category domain="https://samuflore.top/tags/Testbench/">Testbench</category>
      
      
      <comments>https://samuflore.top/posts/2dab591c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[鶴鳴洲集]“他妈的”，究竟是谁妈的？</title>
      <link>https://samuflore.top/posts/f4bf9c17/</link>
      <guid>https://samuflore.top/posts/f4bf9c17/</guid>
      <pubDate>Sun, 19 Oct 2025 06:15:12 GMT</pubDate>
      
      <description>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;530&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=22658523&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
&lt;hr&gt;
&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;這“他媽的”的由來以及始於何代，我也不明白。經史上所見罵人的話，無非是“役夫”，“奴”，“死公”；較厲害的，有“老狗”，“貉子”；更厲害，涉及先代的，也不外乎“而母婢也”，“贅閹遺醜”罷了！還沒見過什麼“媽的”怎樣，雖然也許是士大夫諱而不錄。&lt;br&gt;
&lt;strong&gt;《論“他媽的”》 魯迅&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="86" src="//music.163.com/outchain/player?type=2&id=22658523&auto=1&height=66"></iframe><hr><h1 id="序">序</h1><blockquote><p>這“他媽的”的由來以及始於何代，我也不明白。經史上所見罵人的話，無非是“役夫”，“奴”，“死公”；較厲害的，有“老狗”，“貉子”；更厲害，涉及先代的，也不外乎“而母婢也”，“贅閹遺醜”罷了！還沒見過什麼“媽的”怎樣，雖然也許是士大夫諱而不錄。<br><strong>《論“他媽的”》 魯迅</strong></p></blockquote><span id="more"></span><hr><h1 id="早有的疑惑">早有的疑惑</h1><p>我们都知道，时至今日，在普通话全国推行的大背景下，“ɲit”系（如湘语、西南官话等）和“ʦʰɑk”系（如赣语、南京官话等）这指代同一动作的两个最古老、最广泛的发音及其演变出的各变种仍因为地区的不同而出现在不同的方言中，尚未见一统的趋势。而与此截然不同的是这句“他妈的”竟然早已传遍九州，成为放之四海而皆准的一句国骂了，实在是让人啧啧称奇。不仅如此，这没头没尾的一个词（甚至不算一个词，仿佛是它原来是一个偏正短语，而“偏”把“正”都给掩盖了）也让人疑惑它为什么具有如此的攻击性和认可度。我曾和<ins>秀之兄</ins>探讨过这个神秘的问题——“他妈的”，究竟是谁妈的？可惜并没有实质性的结果。</p><p>现在我正打算好好重新思考这个问题。</p><hr><h1 id="虚空索敌">虚空索敌</h1><p>在二人对话的时候，这句“他妈的”貌似没有攻击任何人，可还是会让对方觉得自己受到了侮辱，说话人甚至不用在“他”前面再冠以一个“你”来强制指向听话人。这很奇怪，就像英语中的：</p><blockquote><p>Damn it!</p></blockquote><p>这里的“it”同样不是表示说话人真的诅咒了什么东西，可见“it”的语义在“damn”的对比下已经退化至几乎没有了。那么，既然“他妈的”能够对听话人造成直接的伤害，重点显然也不在“他”，而在“妈的”。</p><p>可这一词的出现也甚是奇怪。倘若叫一个外国人来看，一定无法理解它的意思——一个残缺的定语，仿佛话没有说完一样。纵观别国的国骂，是较少出现这样的现象的，像俄语的“Сука блядь”是由两个名词构成，日语的“馬鹿野郎（ばかやろう）”也是如此，英语的“Fuck”虽是动词，单独出现却并不像一个定语单独出现那么奇怪，而且后面还通常有一个“U”来锁定对面呢。相比之下，汉语仿佛一贯的“婉转”起来，不仅话不说完，还顾左右而言“他”，却仍然保持攻击力，该说不愧是保持了詈语中的“优良传统”——攻击人不如攻击其家人。</p><p>由此可见，其实这句“他妈的”并非虚空索敌。在“他”的意思弱化的前提下，如果一定要探讨其意义，那么首先：</p><p><mark>无论“他”是谁，它一定包含了“你”的意思。</mark></p><p>然而，语言并不在真空中产生。为什么终究是“他”而不是“你”，并不能简单地由此得到答案。</p><hr><h1 id="家与世家">家与世家</h1><p>按照鲁迅先生的说法，攻击血缘血统，“在戰略上，真可謂奇譎的了。最先發明這一句“他媽的”的人物，確要算一個天才，——然而是一個卑劣的天才。”<ins>魏</ins>、<ins>晋</ins>以来，世家、门阀兴起，几乎垄断了一切上升的道路。普通人想要为官从仕，难如登天。而世家子弟借助祖上积累的名望之荫蔽，即便平庸无能也能得到一个闲职。对此不满的人可以分为两类：有文化而寒门出身的，以及庶民。《广弘明记·卷七》中记载：</p><div class="wenyan"><p>邢子才、河間人、仕魏著作郎遷中書黄門郎、以為婦人不可保、謂元景曰、卿何必姓王、元景變色、子才曰、我亦何必姓邢、能保五世耶。</p></div><p>大概是说<ins>邢子才</ins>认为<ins>王元景</ins>并不一定姓<ins>王</ins>（即血统不纯之意），而自己也不一定姓<ins>邢</ins>。血统即使再高贵，五世之后继承它的人，仍然就高贵么？<ins>王</ins>自<ins>魏</ins>、<ins>晋</ins>时已是大姓，到<ins>北魏</ins>，旁支一定众多，其中想必就有与宗家相隔甚远，只是沾了<ins>王</ins>姓的光的存在。<ins>邢子才</ins>用这种方式讽刺这些承蒙祖辈威名的无能之人，轻而易举使其“变色”。毕竟他们既没有能力，也没有功绩，唯一值得骄傲的祖辈一旦被毁，就与庶民无异了。</p><p>而“同一的意思，但沒有邢子才的文才，而直出於“下等人”之口的，就是：‘他媽的！’”</p><p>我认为这段分析实在是精彩。一是即便是再卑微的分家，仍然不是彻底的庶民能高攀的；二是在教育不普及的古代，一般人的确很难以<ins>邢子才</ins>那样的方式去讽刺豪绅们。倘若穷苦老百姓受到这些末流的欺负了，便能够当着这些人的面狠狠骂一句“他妈的”——“你妈的”是不能骂的，而“他妈的”的“他”却可以任由自己发挥。比方说心里想骂的是这豪绅的兄弟姐妹，那也算是拐弯抹角的骂到他本人了。又或者是两个人闲谈，聊到乡里的这些“暴发户”们又订了什么苛捐杂税，又打人了抢劫了，于是啐一口，骂一句“他妈的”，这肯定是直指那些人本人了。</p><p>这样来看，<mark>人们把对欺压者、苦闷事化做一个假想敌（“他”），然后用最狠的方式去攻击来发泄怨气。</mark> 虽然这只是象征性的复仇，但是对于一个隐忍的民族来说，已经足够了。</p><hr><h1 id="语义通胀">语义通胀</h1><p>今天已经没人在乎“他妈的”究竟是谁妈的了。</p><p>以前，“冷”和“很冷”可能一个在零上，多穿点衣服还能正常活动；一个在零下，冻得你出不了门。而今天“冷”和“冷的要死”可能并没有什么区别。同样，“哈哈哈哈哈哈哈哈哈哈”并不比“哈哈哈”更高兴一些，叫“宝子”、“亲”未必就比叫“您”更亲昵，“食堂里”也未必（？）就装得下“全中国的人”……事物的发展之迅速超乎人的想象，语言不能及时更新，原有词汇的语义就必然会通胀以适应新的用途。</p><p>“他妈的”也是如此。现在“他”就算直接换成“你”，我想真正会感到被冒犯的人也不会占多数。这句话已经彻底成为了一个语气词：它早已失去语法功能，现在其辱骂的意义也已被稀释。究其原因其实很多，汉语的詈语随着时间的变化也在不断变多，更具攻击性的话也层出不穷。社会风气的转变和民众思想的开悟也是重要的原因，人们很多时候不再需要拐弯抹角地去攻击来获得内心的安慰。</p><p>另外：</p><blockquote><p>中國人至今還有無數“等”，還是依賴門第，還是倚仗祖宗。倘不改造，即永遠有無聲的或有聲的“國罵”。就是“他媽的”，圍繞在上下和四旁，而且這還須在太平的時候。</p></blockquote><p>现在来看，确实已经彻底改造了。</p><h1 id="最后的最后">最后的最后</h1><p>“ɲit”系和“ʦʰɑk”系仍因为地区的不同而出现在不同的方言中，尚未见一统的趋势。而与此截然不同的是这句“他妈的”竟然早已传遍九州，成为放之四海而皆准的一句国骂了。再次考虑开头这个问题，其实并不难回答。因为“他妈的”所蕴含的用法、深层的社会基础和跨越地域和方言的朴素情感，让它举国通用。方言仍然会影响这三个字的具体读音，但是“他”永远是“他妈的”的“他”，“妈”永远是“他妈的”的“妈”，“的”永远是“他妈的”的“的”。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E9%B6%B4%E9%B3%B4%E6%B4%B2%E9%9B%86/">鶴鳴洲集</category>
      
      
      <category domain="https://samuflore.top/tags/Linguistics/">Linguistics</category>
      
      
      <comments>https://samuflore.top/posts/f4bf9c17/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[孤獨星球]贺卿传</title>
      <link>https://samuflore.top/posts/90dbc4f6/</link>
      <guid>https://samuflore.top/posts/90dbc4f6/</guid>
      <pubDate>Tue, 14 Oct 2025 11:00:48 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;以本文纪念一个为枯燥高三生活带来涟漪的人。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>以本文纪念一个为枯燥高三生活带来涟漪的人。</p><span id="more"></span><hr><h1 id="前日谈">前日谈</h1><p>今天与 <ins>T 卿</ins>闲聊到高三时她班上有人因压力过大精神出现问题的往事，这才想到自己虽然不熟，却也是认识这样一号人物的。虽然事情不大不小，但是的确为高三的生活带来了一个相当有意思的插曲，遂产生了为其立传的想法。</p><p>为避其名讳，我就姑且称她为<ins>贺卿</ins>。<ins>贺卿</ins>身材中等，身高大约一米六，不戴眼镜。初次了解到她是在某教育机构的数学课上，<ins>贺卿</ins>正排在我前面请教老师一道构造原函数的数学题，我只记得当时她正与老师兴致勃勃地讲着自己是哪里哪里不会，又把答案拿出来答案给老师描述答案是如何如何做，老师听了，又翻了翻答案，于是大笑起来：</p><blockquote><p>“这样构造原函数，谁想得到？分明就是上帝视角……”</p></blockquote><p>一边询问我的意见，我则确实没有认真听他们到底在讨论些什么（雾），只能应付过去。现在想起来，她不过和我一样是一个再正常不过的天朝高中生而已。</p><hr><h1 id="贺卿">贺卿</h1><p>我后来没有去教育机构上课了，也就再也没有听过她的消息，也没有关注过了。</p><p>故事并没有完结。说起来，一切的转机是某天<ins>胡君</ins>收了一封神秘的来信，信中满是爱慕的话语。字迹工整，写在精选的信纸上，或许还附有一些见面礼（不太记得了），东西在无人的时刻放到了<ins>胡君</ins>的座位上。这样的精细程度，让人第一时间就排除了朋友之间恶作剧的可能性，于是大家都起哄起来。我也凑过去，看到落款是一个姓<ins>杨</ins>的（为避名讳，下称<ins>杨卿</ins>）女名，这个名字貌似对我们甚至对<ins>胡君</ins>都是闻所未闻的，实在让人可疑，不过大家也期望着事情会如何继续发展。</p><p>之后<ins>杨卿</ins>确实也又趁教室没人的中午或晚上来给<ins>胡君</ins>送信，送小礼物，有很多次都被目击到。事情也越传越开，不出意料也传到<ins>杨卿</ins>班上去了。于是我们两个班一通气，才知道不得了的事情。</p><p>该班确实有一个<ins>杨卿</ins>，但此人与事件毫无关系，而是另一个人冒用其名字给<ins>胡君</ins>写信，送礼物，而这个人居然就是<ins>贺卿</ins>。</p><p>有一天吃完晚餐我早早回到教室休息，就看到一个女生幽幽地从后门进来，走到<ins>胡君</ins>座位边上放了东西，又幽幽地出门去了，因为我是见过<ins>贺卿</ins>的脸的，这才让我确信了<ins>贺卿</ins>和“<ins>杨卿</ins>”真的是一个人。</p><p>后来慢慢地大家都知道了她有这样一种精神类疾病，在发作的时候会认为自己是同班的<ins>杨卿</ins>，写下这些信的时候，大概也是处于这种状态下吧。据称她曾在课上发作，还辱骂过真正的<ins>杨卿</ins>，具体情形已不可考，不过我想这对<ins>杨卿</ins>来说一定非常恐怖。毕竟如同自己的灵魂被夺走了一半一样，更何况时不时出现的“另一个自己”还要跟本人争抢这个名字。</p><p>也许<ins>贺卿</ins>的“<ins>贺</ins>”人格也知道了大家发现她不是<ins>杨卿</ins>这件事，便在接下来的信给<ins>胡君</ins>中坦白了自己的精神问题，说“无法控制<ins>杨卿</ins>的出现”，“自己的人格要做斗争”，“仍然喜欢”之类的话，并明确落款为“<ins>贺卿</ins>”。这倒是很吓人了：倘若是所谓“<ins>杨卿</ins>”对<ins>胡君</ins>有好感的话，那其实反而可以借由疾病的理由忽视掉，而这封信的出现倒让人不得不去正视一个真实存在的人的心意，对于<ins>胡君</ins>来说，这一堆落款不同的信和小礼物，想必是头疼不已了。</p><p>然而这种关系很明显是不会有任何结果的。<ins>贺卿</ins>（或“<ins>杨卿</ins>”？不清楚）后来又给另外一位<ins>龙君</ins>写了一封情书，属实是把我们都吓得不轻。要知道倘若一直没有回音，她搞不好要给每个人写一封情书了。不过自此之后到高考结束，她再也没有任何动静，我们也专心于高考而淡忘了这件事。</p><p>24 年 9 月，已经毕业三个月了，她突然通过 QQ 短视频（wtf?）加了我 QQ。且不带任何备注前来。我礼貌发问：</p><blockquote><p>“请问你是？”</p></blockquote><p>隔天，她回复了自己的姓名（<ins>贺</ins>）。说真的，我心里立刻慌乱起来，便诚惶诚恐，战战兢兢地问她有何贵干，而得到的答复只是“加着玩”，于是我提着的心放下来，再也没有打开过这个聊天窗口。</p><p>我并不清楚她是否知道我的名字，也不知道她是否治好了这个病。不过她加我时是以<ins>贺</ins>的身份来的，我倒希望她已经回归正常生活了。</p><hr><h1 id="后日谈">后日谈</h1><p>与 <ins>T 卿</ins>闲聊的时候我才想到还有<ins>贺卿</ins>的 QQ，于是说要截聊天记录给她看，之后出于好奇点开<ins>贺卿</ins>主页一看，发现在不知什么时候她已经把 QQ 给注销了。<ins>贺卿</ins>永远从我的人际关系中消失了。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E5%AD%A4%E7%8D%A8%E6%98%9F%E7%90%83/">孤獨星球</category>
      
      
      <category domain="https://samuflore.top/tags/Biography/">Biography</category>
      
      
      <comments>https://samuflore.top/posts/90dbc4f6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P0]P0 上机之思考</title>
      <link>https://samuflore.top/posts/18246a69/</link>
      <guid>https://samuflore.top/posts/18246a69/</guid>
      <pubDate>Mon, 13 Oct 2025 13:14:40 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;今天非常惊险地通过了 P0 上机（实话说 P0 挂了就招笑了&lt;br&gt;
但是还是非常难过，在错误的地方浪费了大量时间。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>今天非常惊险地通过了 P0 上机（实话说 P0 挂了就招笑了<br>但是还是非常难过，在错误的地方浪费了大量时间。</p><span id="more"></span><hr><h1 id="第一题">第一题</h1><h2 id="题干">题干</h2><p>第一题的大致题意是搭建一个 Moore 机，实现下述功能：</p><p>串行输入一个数列，每个 5 位宽，若当前输入的数<ins>严格大于</ins>前一个数，则称为一次“起”，若<ins>严格小于</ins>则称为一次“伏”。若最后四个输入满足“起 起 伏 起”的情况，则输出为 1。</p><p>识别是循环的，比如一个“起 起 伏 起”的最后一个起可以当作下一个“起 起 伏 起”的第一个“起”，如“起 起 伏 起 起 伏 起”中第 4 个“起”和第 7 个 “起”要输出 1。</p><p>初始情况下或者异步复位后，数列的第 0 个元素 a<sub>0</sub> 为 <code>5'd7</code>。</p><h2 id="感悟">感悟</h2><p>这题的核心在于怎么实现这个初始的 <code>5'd7</code>。<br>很明显我得用一个寄存器去保存上一个输入的数。一开始我选择用寄存器初始化的方法去给这个寄存器初始化一个 <code>5'd7</code>，但是这显然错了，耽误了我很多分钟的时间（。</p><p>这个 <code>5'd7</code> 可以说是要以一种“异步初始化”的形式来实现，而我所掌握的是同步初始化。什么意思呢？现有的初始化方法只能当时钟上升沿到来时才给寄存器赋初值。也就是说当第一个时钟周期来时寄存器才变成 <code>5'd7</code>，但是按理说这时候应该存入此时输入的值了，也就是 a<sub>1</sub>，所以这根本不对。</p><p>（补丁）我的老天，发现早已有大佬给出了“异步初始化”的方法，其实只要在同步的基础上略微改动即可。</p><p><img src="/posts/18246a69/immediately.png" alt="“异步初始化”"></p><p>我采用的是笨办法，直接在设计状态的时候把初始状态编了一个状态码，如果下一个输出大于 <code>5'd7</code> 就转到下一个状态——一个“起”，与此同时还设计了一个 invalid 状态接受所有不符合“起 起 伏 起”的输入，比如“伏”完又“伏”，或者只有一个“起”就“伏”之类的，当出现一个“起”时，invalid 也转到一个“起”的状态……<br>这样状态有点多，也有点混乱，现在想来我觉得并不好。</p><p>看群里大佬说可以用一个 MUX 来控制当前数是和寄存器出来的数比大小还是和 <code>5'd7</code> 比大小，我觉得非常好，实在太强了orz。<br>具体来说，可以搞一个 最大值为 2 的计数器，设置其达到最大值后保持不变，把 carry 端连到 MUX 的选择信号端。第一个上升沿到来时选择 <code>5'd7</code>，之后的上升沿到来时选择寄存器出来的值。</p><p>太巧妙了orz…</p><hr><h1 id="第二题">第二题</h1><h2 id="题干-2">题干</h2><p>搭建一个 Mealy 机，实现下述功能：</p><p>通过输入 op（操作符）和 operant（操作数），算出值保存到寄存器中。由于是 Mealy 机，记得要异步输出结果。</p><p>2 位宽的输入 op，各种输入含义如下：</p><ul class="lvl-0"><li class="lvl-2"><p>00：同步复位</p></li><li class="lvl-2"><p>01：将当前值逻辑左移一位，再加上操作数。</p></li><li class="lvl-2"><p>10：将当前值逻辑左移一位，再减去操作数。</p></li><li class="lvl-2"><p>11：将当前值逻辑左移一位，与操作数按位异或。</p></li></ul><h2 id="感悟-2">感悟</h2><p>这题较简单，记得是 Mealy 机要异步输出就行。</p><hr><h1 id="第三题">第三题</h1><h2 id="题干-3">题干</h2><p>题目假设有一个可以无限上人的电梯，运行在 4 层楼间（0，1，2，3），从一个给定的楼层 <code>from</code> 处开始运行。四层楼都有人要乘电梯，人数各不相同。电梯按照<ins>从人多到人少</ins>的顺序去接客，要设计一个组合电路计算电梯接下所有客人时总共经过了多少层楼。因电梯从 <code>from</code> 处开始运行，故 <code>from</code> 楼的客人立刻上电梯。<br>从 n 楼运行到 m 楼经过的楼层是 |m - n|。</p><h2 id="感悟-3">感悟</h2><p>因为第一题花费太多时间导致我没能在上机的时候完成这题（悲</p><p>隔天来看，这题其实还是有难度的。难点在于如何实现从人多到人少的运行顺序。我采用的方法是冒泡排序，在只有 4 个输入的时候还是非常好用的。接下来一个问题是如何把人数和楼层数绑定，排序肯定只针对于楼层的人数。我又采用了一个笨办法，排完序之后每个值和输入的四个值挨个比较，如果相等就代表楼层号是这个（</p><p>最后绝对值的实现可以用 Subtractor 和 Negator 实现。Subtractor 有一个端口用来监控减法是否得到负数，如果为负数，用一个 MUX 选择差的相反数即可。</p><p>还有一点要注意就是 Comparator 的比较方法，要依题目选定是无符号比较还是补码比较。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/Logisim/">Logisim</category>
      
      <category domain="https://samuflore.top/tags/P0/">P0</category>
      
      
      <comments>https://samuflore.top/posts/18246a69/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO P0]关于 Mealy 机和 Moore 机的思考</title>
      <link>https://samuflore.top/posts/11653afb/</link>
      <guid>https://samuflore.top/posts/11653afb/</guid>
      <pubDate>Sun, 05 Oct 2025 09:24:33 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;完成 P0 课下内容后，我对 Logisim 中完成两种有限状态机的方法以及其区别有了一些见解。&lt;br&gt;
&lt;a href=&quot;https://samuflore.top/posts/e7ebcfa7/&quot;&gt;前情提要&lt;/a&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>完成 P0 课下内容后，我对 Logisim 中完成两种有限状态机的方法以及其区别有了一些见解。<br><a href="https://samuflore.top/posts/e7ebcfa7/">前情提要</a>。</p><span id="more"></span><p>两种状态机都有“状态转移”、“状态存储”和“输出电路”三部分构成。且“状态转移”和“输出电路”是<ins>组合逻辑</ins>实现，而“状态存储”是<ins>时序逻辑</ins>实现。</p><hr><h1 id="Moore-机">Moore 机</h1><p><img src="/posts/11653afb/Moore.svg" alt="Moore Machine"></p><p>Moore 机的输出不和输入直接挂钩，是根据当前状态来决定是否输出的。换言之，我们应当把状态储存的值提取出来，然后通过一个输出逻辑来生成我们期待的输出值。</p><p>这其实隐含了一个信息：状态存储是时序逻辑（一般来说我们用寄存器存储状态编码），其更新通常来说是在时钟上升沿发生的，这就导致了在时钟上升沿（或题指定的时刻）其输出给输出电路的值发生改变，从而最后得到的结果改变。简单来说，输出结果的更新发生在时钟上升沿（或给定时刻）。</p><hr><h1 id="Mealy-机">Mealy 机</h1><p><img src="/posts/11653afb/Mealy.svg" alt="Mealy Machine"></p><p>Mealy 机的输出与当前输入直接挂钩。输入和当前状态储存的内容共同决定了输出的结果。而且是即时生效，因为组合逻辑不会根据时钟的变化来变化。</p><hr><h1 id="时间差">时间差</h1><p>根据以上的分析，Moore 机和 Mealy 机通常会有时间差。比如下面这个例子：<br>当前状态为 S1，若输入为 In，则状态转为 S2，当状态为 S2，输出 Out 置为 1。</p><ul class="lvl-0"><li class="lvl-2"><p>Moore 机中，它是这样的：</p><ul class="lvl-2"><li class="lvl-6">当前状态 S1；</li><li class="lvl-6">第一个上升沿，检测到输入为 In，状态转为 S2；</li><li class="lvl-6">因为状态是 S2，所以输出 Out 置为 1；</li></ul></li><li class="lvl-2"><p>Mealy 机中，它是这样的：</p><ul class="lvl-2"><li class="lvl-6">当前状态 S1；</li><li class="lvl-6">不论当前是不是上升沿，检测到输入为 In，输出置为 1；</li><li class="lvl-6">第一个上升沿，若输入还是 In，状态转为 S2；</li></ul></li></ul><p>也就是说 Mealy 机给人的直观感受就是“提前”了一周期，明明还是状态 S1，却将输出置为 1 了？</p><p>其实并不是这样一回事，Mealy 机好比有“预判”的功能，如果当前已经是 S1，且输入是 In，它就知道接下来势必变成 S2，因此“预判”了上升沿到来时状态存储的结果，并将输出置为 1。换言之，S2 对于 Mealy 机都是可有可无的，它根本不关心 S1 会不会变成 S2，因为该输出的时候早已经输出了。<br>可以理解成 Mealy 机的输出和时钟是异步的。</p><p>Moore 机则不然。就算知道了当前输入是 In，也得等到下一个周期更新完状态，才能通过输出电路去输出结果。<br>可以理解成 Moore 机的输出和时钟是同步的。</p><h1 id="四不像机">四不像机</h1><p>然而我今天画了一个四不像出来。<br>在状态转移电路中，我的输出端自作多情的添加了一个 <code>isOut</code> 含义的端口。什么意思呢？就是根据输入和当前状态，我直接指定了 <code>Out</code> 端口要不要置为 1。还是上面的例子，就好比我的状态转移电路是这样：</p><ul class="lvl-0"><li class="lvl-2"><p>如果当前状态是 S1，且输入是 In，则状态转为 S2，并告诉 <code>Out</code> 要输出 1。</p></li></ul><p>然后我把 <code>isOut</code> 和 <code>Out</code> 直接相连了。</p><p>那么这是什么机呢？看似 <code>Out</code> 并没有直接和输入挂钩，可是事实并非如此。我们仍然一步一步分析：</p><ul class="lvl-0"><li class="lvl-2"><p>当前状态是 S1，输入是 In。</p></li><li class="lvl-2"><p>状态转移电路是组合逻辑，因此无论现在是什么时刻，它读入了当前状态 S1，以及输入 In，然后它想，“哦，现在我要立刻输出 S2，并把 <code>isOut</code> 置为 1。”</p></li><li class="lvl-2"><p>S2 朝着“状态存储”去了，但是不知道现在是不是时钟上升沿，因此其有没有进入寄存器，我们不知道。</p></li><li class="lvl-2"><p>但是 <code>isOut</code> 直接连着 <code>Out</code>，于是 <code>Out</code> 被置为 1 了。</p></li></ul><p>仔细一想，这不是 Mealy 机的形式吗？输出和时钟异步。但是 <code>Out</code> 却没有和输入直接相连，而是隐式地通过 <code>isOut</code> 这个端口相连了。正如前面所说，<code>isOut</code> 起到了“预判”的作用，而这正是 Mealy 机的特点。</p><p>如果我希望当前状态更新为 S2 再输出，有办法么？</p><p>自然是有的，我们需要将输出强制与时间同步。也就是说不能让 <code>isOut</code> 直接与 <code>Out</code> 相连了。</p><p>最简单的办法是弄一个寄存器，<code>isOut</code> 做输入，输出给 <code>Out</code>，然后用时钟驱动。这样如果 <code>isOut</code> 被置为 1，这个信号会因为寄存器的原因被强行滞留到下一个上升沿到来时，然后进入寄存器并立即传给 <code>Out</code>。</p><p>再来想想这是否是正确的：</p><ul class="lvl-0"><li class="lvl-2"><p>当前状态是 S1，输入是 In。</p></li><li class="lvl-2"><p>状态转移电路是组合逻辑，因此无论现在是什么时刻，它读入了当前状态 S1，以及输入 In，然后它想，“哦，现在我要立刻输出 S2，并把 <code>isOut</code> 置为 1。”</p></li><li class="lvl-2"><p>S2 在下一个时钟上升沿到来之前都不会进入寄存器并更新状态，与此同时 <code>isOut</code> 在下一个时钟上升沿到来之前也不会进入寄存器传递给 <code>Out</code>。</p></li><li class="lvl-2"><p>时钟上升沿到来了，然后 S2 进入了寄存器完成状态转移，同时 <code>Out</code> 置为 1。</p></li></ul><p>看来确实解决问题了，不过这样真的就把整个电路变成“四不像”机了。最正确的做法是不要搞什么 <code>isOut</code>，直接用“状态存储”的输出值来判断要不要将 <code>Out</code> 置为 1。这样就能正确地完成 Moore 机了。如果要的是 Mealy 机，最好把输入和“状态存储”的输出值直接相连，用一个逻辑来判断，以免混淆。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/Logisim/">Logisim</category>
      
      <category domain="https://samuflore.top/tags/P0/">P0</category>
      
      <category domain="https://samuflore.top/tags/Finite-State-Machine/">Finite State Machine</category>
      
      <category domain="https://samuflore.top/tags/Mealy-Machine/">Mealy Machine</category>
      
      <category domain="https://samuflore.top/tags/Moore-Machine/">Moore Machine</category>
      
      
      <comments>https://samuflore.top/posts/11653afb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[楠竹蓮花集]老狗</title>
      <link>https://samuflore.top/posts/b73dbb31/</link>
      <guid>https://samuflore.top/posts/b73dbb31/</guid>
      <pubDate>Sat, 04 Oct 2025 03:28:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这条狗已经太老太老了。&lt;br&gt;
据我表弟说，自他记事起，这条狗就已经在家里了。可能已经有 12 岁或 13 岁，具体不可考证。不过 10 岁总是有的。但其实，我感觉自我记事起，这条狗就已经在那了。&lt;/p&gt;
&lt;p&gt;老狗有一身黑色的皮毛，间或夹杂一些白毛。论相貌，确实是一般的中</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这条狗已经太老太老了。<br>据我表弟说，自他记事起，这条狗就已经在家里了。可能已经有 12 岁或 13 岁，具体不可考证。不过 10 岁总是有的。但其实，我感觉自我记事起，这条狗就已经在那了。</p><p>老狗有一身黑色的皮毛，间或夹杂一些白毛。论相貌，确实是一般的中华田园犬形象。年轻的时候，毛是顺滑的，虽然颜色并不统一，但仍可以被称之为“花纹”的。不像这一次见到它，皮毛斑斑驳驳，所剩无几了。<br>我推测这惨状一方面是因为年龄增长的缘故，另一方面则因为老狗总是外出寻衅滋事，教人或者其它狗打的。</p><p>老狗年轻时总是一声不响地出门去，然后瘸着腿慢慢回来，这自然让人遐想它在外面经过了怎样一番搏斗并得胜——老狗没死，那自然是把外面的狗揍了一顿，亦或是教人撵走了，总之是胜利的：倘若没有人的帮助，外面的狗一定被它揍得很惨；若是人出手把老狗赶走，那外面的狗也真是“狗仗人势”，欺负老狗没有主人帮忙，实在不能说老狗败了。老狗就是这样出去打架，然后一瘸一拐回来养伤，它好的很快，但一定留下了残疾，比如它现在这一身皮毛的惨状，我想。</p><p>有时我觉得老狗也会怕打输，打输就只有一个“死”字了。隔壁的小白狗也是一样的出去打架，去年回的时候还冲着我叫，今年却没有了，我第二天才反应过来这件事，正疑惑没有看到它的身影，就听见说：</p><blockquote><p>“它出门和大狗打架，没打得赢，死在外面了。”<br>“啊呀……”</p></blockquote><p>老狗一定也是知道这件事的。<br>况且老狗也老了，打不动了。<br>它唯一能做的大概只有趴在院子门口，对着陌生人吼上两嗓子——以往我回来，它都是这样迎接我的。今年它仿佛这个工作也无法胜任了。它趴在汽车前，也不叫，就是趴着。汽车鸣了几下喇叭，它才慢悠悠绕到一边，毫无声响，以至于司机无法确定它是否离开道路，不敢贸然前进。<br>老狗太老太老了。</p><p>老狗在院子里转圈，我端着相机准备拍它。主人给它端了剩饭剩菜，一边用手抚摸着老狗的额头，要老狗吃。它吃的很慢，吃骨头的时候也没有力气，只能慢慢咀嚼。走路的时候，头耷拉着，偏向左边，腿倒是不瘸了，可能是长久没有打架的缘故。有一天，老狗仍然在院子里转圈，我又端着相机准备拍它，突然，远处传来声音说：</p><blockquote><p>“这狗身上好臭……”</p></blockquote><p>老狗原地顿了顿，然后耷拉着半边脑袋回屋去了。</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E6%A5%A0%E7%AB%B9%E8%93%AE%E8%8A%B1%E9%9B%86/">楠竹蓮花集</category>
      
      
      <category domain="https://samuflore.top/tags/Life/">Life</category>
      
      
      <comments>https://samuflore.top/posts/b73dbb31/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CO Pre]MIPS 汇编入门</title>
      <link>https://samuflore.top/posts/1f9d902/</link>
      <guid>https://samuflore.top/posts/1f9d902/</guid>
      <pubDate>Sat, 20 Sep 2025 08:00:25 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;序&quot;&gt;序&lt;/h1&gt;
&lt;p&gt;这是北京航空航天大学计算机学院 2025 年计算机组成原理预习部分的 MIPS 汇编部分。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序">序</h1><p>这是北京航空航天大学计算机学院 2025 年计算机组成原理预习部分的 MIPS 汇编部分。</p><span id="more"></span><hr><h1 id="IDE">IDE</h1><p>MARS（MIPS ASSEMBLER AND RUNTIME SIMULATOR）<br>MARS 是一个轻量级的、用于教学的 MIPS 汇编语言集成开发环境（IDE）。它由密苏里州立大学开发，基于 Java 环境运行，完全绿色且免费。我们的课程即使用此软件来进行 MIPS 汇编语言的学习、编写和运行。</p><hr><h1 id="寄存器简介">寄存器简介</h1><h2 id="什么是寄存器？">什么是寄存器？</h2><p>寄存器是一种高速存储器，可以暂存指令、数据、地址等。CPU 中只有有限的寄存器可供使用。<br>MIPS 体系结构中，CPU 对数据的操作是基于寄存器的。内存中的数据需要先使用读取类指令（Load）保存到寄存器中才可使用；操作完成的数据也需要使用装载类指令（Store）保存到内存中。</p><h2 id="MIPS-中的-32-个通用寄存器">MIPS 中的 32 个通用寄存器</h2><p>所谓通用寄存器（General - Purpose Register, GPR），代表它没有明确规定的用途，程序员可以随意对他们赋值、取值，同时他们的值也可以直接参与到各种指令之中。<br>然而，虽然冠有通用的头衔，程序员们还是会以一定的规则来使用它们，这是为了便于程序员之间的交流，同时也是为编译器等工具定下了一定的标准。</p><table><thead><tr><th>Registers</th><th>Name</th><th>Usage</th></tr></thead><tbody><tr><td>$0</td><td>$zero</td><td>常量0</td></tr><tr><td>$1</td><td>$at</td><td>保留给汇编器使用的临时变量</td></tr><tr><td>$2-$3</td><td>$v0-$v1</td><td>函数调用返回值</td></tr><tr><td>$4-$7</td><td>$a0-$a3</td><td>函数调用参数</td></tr><tr><td>$8-$15</td><td>$t0-$t7</td><td>临时变量</td></tr><tr><td>$16-$23</td><td>$s0-$s7</td><td>需要保存的变量</td></tr><tr><td>$24-$25</td><td>$t8-$t9</td><td>临时变量</td></tr><tr><td>$26-$27</td><td>$k0-$k1</td><td>留给操作系统使用</td></tr><tr><td>$28</td><td>$gp</td><td>全局指针</td></tr><tr><td>$29</td><td>$sp</td><td>堆栈指针</td></tr><tr><td>$30</td><td>$fp</td><td>帧指针</td></tr><tr><td>$31</td><td>$ra</td><td>返回地址</td></tr></tbody></table><div class="note info">            <ul class="lvl-0"><li class="lvl-2"><p><code>$0</code> 一般不能用于赋值。即对其赋值不违反语法，但其始终保持为 0。</p></li><li class="lvl-2"><p><code>$1</code> 保留给汇编器，一般不使用它。</p></li></ul>          </div><p><a id="specialReg"></a></p><h2 id="三个特殊寄存器">三个特殊寄存器</h2><ul class="lvl-0"><li class="lvl-2"><p>PC（Program Counter）：它用于存储当前 CPU 正在执行的指令在内存中的地址。</p></li><li class="lvl-2"><p>HI：这个寄存器用于乘除法。它被用来存放每次乘法结果的高 32 位，也被用来存放除法结果的余数。</p></li><li class="lvl-2"><p>LO：HI 的孪生兄弟。它被用来存放每次乘法结果的低 32 位，也被用来存放除法结果的商。</p></li></ul><hr><h1 id="MIPS-汇编指令集架构">MIPS 汇编指令集架构</h1><h2 id="什么是指令？">什么是指令？</h2><p>指令，即是由处理器指令集架构（Instruction Set Architecture，可以理解为计算机体系结构中对程序相关的部分所做的定义）定义的处理器的独立操作，这个操作一般是运算、存储、读取等。一个指令在 CPU 中真正的存在形式是高低电平，也可以理解为由 01 序列组成的机器码。但因为机器码人类难以阅读和理解，所以指令一般由汇编语言来表示，也就是我们俗称的汇编指令。从这个角度上来说，汇编指令只是指令的一种表示形式而已，其实质是一样的。</p><h2 id="指令之格式">指令之格式</h2><p>指令一般由一个<ins>指令名</ins>开头，后跟其<ins>操作数</ins>，中间由<ins>空格</ins>或<ins>逗号</ins>隔开。操作数一般为 0 至 3 个，且每个指令名有其固定的操作数。一般来说格式如下：</p><p><em>指令名  操作数 1  操作数 2  操作数 3</em></p><p>或：</p><p><em>指令名 操作数 1, 操作数 3(操作数 2)</em></p><p>操作数可以是寄存器、立即数<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>或标签<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。每个指令都有其固定的对操作数形式的要求。而标签最终会由汇编器转换为立即数。</p><p>常见指令格式样例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add </span>$<span class="built_in">s0</span>, $<span class="built_in">a0</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">s0</span>, $<span class="built_in">a0</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">mult </span>$<span class="built_in">s1</span>, $<span class="built_in">s2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a1</span>, $<span class="built_in">a2</span>, loop</span><br><span class="line"><span class="keyword">blez </span>$<span class="built_in">s1</span>, -<span class="number">2</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">j </span><span class="number">0x00003014</span></span><br></pre></td></tr></table></figure><div class="tips"><p>前文提到可以用标签代替某个地址，正如上例第 4 行的 <code>loop</code> 标签。</p></div><div class="warning"><p>注意：在 MARS 中，跳转指令只能使用标签来进行跳转，不能使用立即数！</p></div><h2 id="机器码指令">机器码指令</h2><h3 id="机器码">机器码</h3><p>计算机只能理解二进制形式的数据。而我们前面所说的汇编语言，最终就会转化为机器语言——也就是机器码指令， CPU 可以直接识别这种机器语言，从而去完成相应的操作。<br>MIPS 汇编中，所有的指令长度均为 32 位，即 4 字节，或者说 1 字。<br>一段汇编语言可以转换为一段机器码，例如下面这段汇编指令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="meta">.global</span> main</span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="number">0</span>, <span class="number">100</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="number">0</span>, <span class="number">200</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t3</span>, $<span class="built_in">t2</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t4</span>, <span class="number">233</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>, <span class="number">2333</span></span><br><span class="line"><span class="keyword">mthi </span>$<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">loop:</span></span><br><span class="line"><span class="keyword">j </span>loop</span><br><span class="line"><span class="keyword">nop</span></span><br></pre></td></tr></table></figure><p>其转换后的结果为（16 进制）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">20080064</span><br><span class="line">340900c8</span><br><span class="line">012a5020</span><br><span class="line">01495822</span><br><span class="line">3c0c00e9</span><br><span class="line">34420001</span><br><span class="line">3484091d</span><br><span class="line">01200011</span><br><span class="line">0000000c</span><br><span class="line">00000000</span><br><span class="line">08000c0a</span><br><span class="line">00000000</span><br></pre></td></tr></table></figure><h3 id="机器码之指令格式">机器码之指令格式</h3><ul class="lvl-0"><li class="lvl-2"><p>R 型指令<br>R 型指令的操作数最多，一般用于运算指令。例如 <code>add</code>、<code>sub</code>、<code>sll</code> 等。其格式如下（左侧为高位，右侧为低位，第二行为位数）：</p></li></ul><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>rd</th><th>shamt</th><th>func</th></tr></thead><tbody><tr><td>6</td><td>5</td><td>5</td><td>5</td><td>5</td><td>6</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>I 型指令型指令的特点是有 16 位的立即数（偏移也是一样的道理）。因此，I 型指令一般用于 <code>addi</code>、<code>subi</code>、<code>ori</code> 等与立即数相运算的指令（这里需要注意：在写汇编语言的时候，需要使用负号来标记负数，而不要和机器码一样认为首位的 1 就代表负数），或 <code>beq</code>、<code>bgtz</code> 等比较跳转指令，因为它们要让两个寄存器的值相比并让 PC 偏移 offset 这么多，刚好利用了全部的字段。还有存取指令，例如 <code>sw</code>、<code>lw</code>，它们在使用时需要对地址指定一个偏移值，也会用到立即数字段。</p></li></ul><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>offset or immediate</th></tr></thead><tbody><tr><td>6</td><td>5</td><td>5</td><td>16</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-3"><p>J 型指令<br>J 型指令很少，常见的为 <code>j</code> 和 <code>jal</code>。他们需要直接跳转至某个地址，而非利用当前的 PC 值加上偏移量计算出新的地址，因此需要的位数较多。</p></li></ul><table><thead><tr><th>op</th><th>address</th></tr></thead><tbody><tr><td>6</td><td>26</td></tr></tbody></table><div class="note info">            <p>严格来说，并非所有的指令都严格遵守上面三种格式，有的如 <code>eret</code>、<code>syscall</code> 指令一样没有操作数；有的如 <code>jalr</code> 指令一样某些字段被固定为某个值。不过，就大部分指令而言，都可按上面三种格式进行解释</p>          </div><ul class="lvl-0"><li class="lvl-2"><p>表格解释</p><ul class="lvl-2"><li class="lvl-4">op：也称 opcode、操作码，用于标识指令的功能。CPU 需要通过这个字段来识别这是一条什么指令。不过，由于 op 只有 6 位，不足以表示所有的 MIPS 指令，因此在 R 型指令中，有 func 字段来辅助它的功能。</li><li class="lvl-4">func: 辅助 op 识别指令。</li><li class="lvl-4">rs, rt, rd: 通用寄存器的代号，并不单指某一寄存器。范围是 <code>$0</code>~<code>$31</code>，用机器码表示就是 00000~11111。</li><li class="lvl-4">shamt: 移位数，用于移位指令。</li><li class="lvl-4">offset: 地址偏移量。</li><li class="lvl-4">immediate: 立即数。</li><li class="lvl-4">address: 跳转目标地址，用于跳转指令。</li></ul></li></ul><div class="note info">            <p><a href="https://cscore.e1.buaa.edu.cn/assets/cscore-assets/MIPS-C%E6%8C%87%E4%BB%A4%E9%9B%86_%E6%A0%A1%E5%AF%B9%E5%AE%8C%E6%88%90%E7%89%88_-%E6%8C%87%E4%BB%A4%E6%8E%92%E5%BA%8F.pdf">MIPS-C 指令集由此查看</a>。</p>          </div><h2 id="扩展指令和伪指令">扩展指令和伪指令</h2><h3 id="扩展指令（Pseudo-Instruction）">扩展指令（Pseudo Instruction）</h3><p>对基本指令的转写（例如用标签代替立即数），或对操作数的略写等，被称作扩展指令。<br>扩展指令的功能主要是简化程序。汇编器将一些常用、但标准指令集不提供的功能封装为一条指令；或者改变现有指令的操作数的形式或个数，使其以新的形式出现。需要注意的是，它们只是形式上是一条新指令，而实际上，在汇编器将其汇编之后，还是使用标准指令来实现的。<br>最常用到的一条扩展指令是 <code>li</code> 指令，它用来为某个寄存器赋值，比如 <code>li $a0,100</code> 就是将 <code>100</code> 赋给 <code>$a0</code> 寄存器。汇编器在翻译这条扩展指令时会根据需要，将它翻译成不同的基本指令或基本指令的组合。譬如：</p><ul class="lvl-0"><li class="lvl-2"><p>所赋的值少于等于 16 位，则等价于用 <code>addiu</code> 指令，比如 <code>addiu $a0, %0, 0x00001000</code>。</p></li><li class="lvl-2"><p>所赋的值大于 16 位，则等价于用 <code>lui</code> 和 <code>ori</code> 指令，即先将高 16 位装在在寄存器的前面，再用或运算补充低 16 位，比如 <code>lui $a1, 0x00001234</code> 和 <code>ori $a0, $a1, 0x00004321</code>。</p></li></ul><p>另一条常用的扩展指令是 <code>la</code> 指令，这条指令与 <code>li</code> 指令非常类似，都是为寄存器赋值，只不过是使用标签来为寄存器赋值。经过了前面的学习，大家应该已经知道标签本质上对应一个 32 位地址，但 <code>li</code> 指令并不能直接使用标签来为寄存器赋值，必须要使用 <code>la</code>。比如 <code>la $t0, fibs</code> 这条指令就是把 <code>fibs</code> 这个标签的地址存入 <code>$t0</code> 中。</p><h3 id="伪指令（Directives）">伪指令（Directives）</h3><p>伪指令（Directives）是用来指导汇编器如何处理程序的语句，有点类似于其他语言中的预处理命令。伪指令不是指令，它并不会被编译为机器码，但他却能影响其他指令的汇编结果。常用的伪指令有以下几个：</p><ul class="lvl-0"><li class="lvl-2"><p><code>.data</code>：用于预先存储数据的伪指令的开始标志。参数为 <code>address</code>，表明数据的初始地址。若无参数，则初始地址设为默认地址。</p></li><li class="lvl-2"><p><code>.text</code>：程序代码指令开始的标志。同上</p></li><li class="lvl-2"><p><code>.word</code>：以字为单位存储数据。格式：<code>[name]: .word [data1], [data2], ...</code>，以字为单位连续存储数据 <code>data1, data2, ...</code> 初始地址保存在标签 <code>name</code> 当中。</p></li><li class="lvl-2"><p><code>.asciiz</code>：以字节为单位存储字符串。末尾自动添加 <code>\0</code>。格式：<code>[name]: .asciiz &quot;[content]&quot;</code>，以字节为单位存储字符串，末尾以 NULL 结束，初始地址保存在标签 <code>name</code> 当中。</p></li></ul><div class="tips"><p>什么是以字节为单位存储字符串呢？举个例子，<code>hello</code> 中每个字母占用一个字节，然后 <code>\0</code> 占用一个字节（0x00）。</p></div><ul class="lvl-0"><li class="lvl-2"><p><code>.space</code>：申请若干个字节的未初始化的内存空间。格式：<code>[name]: .space [n]</code>，申请 n 个字节未初始化的空间，初始地址保存在标签 <code>name</code> 当中。<br><code>.space n</code> 即申请 n 个字节的未初始化的内存空间。</p></li></ul><h2 id="MIPS-指令初步">MIPS 指令初步</h2><div class="note info">            <p>该节学习自<a href="https://kamonto.github.io/Kamonto_blog/2025/09/07/%E4%B8%80%E6%9C%AC%E4%B9%A6%E6%95%99%E4%BD%A0%E9%80%9A%E5%85%B3%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%B8%8A%EF%BC%89/">Kamonto’s Blog《一本书教你通关计组实验》</a>。</p>          </div><h3 id="位运算">位运算</h3><blockquote><p>四则运算是更复杂程序的基石，而位运算是四则运算的基石。<br><em>——麦瑟尔夫</em></p></blockquote><p>本节介绍 <code>and or xor nor andi ori xori</code> 这几种位运算。</p><p>它们的格式都是 <code>op rs, rt, rd</code>，即把 <code>rt</code> 和 <code>rd</code> 两个寄存器的内容进行运算，运算结果存入 <code>rs</code> 寄存器。<ins>运算结果写前面</ins>。</p><p>首先是与运算、或运算、异或运算。正如其名，非常好懂。<br>然后是或非运算，有一个小技巧，就是要对一个寄存器取反，可以利用或非运算来完成（MIPS 指令集没有提供取反指令）：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nor </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, $<span class="number">0</span></span><br></pre></td></tr></table></figure><div class="tips"><p>别忘了 $0 永远是 0。</p></div><p>如果需要把一个寄存器的值和一个立即数进行运算，则需要用到末尾带“i”的指令（即 immediate），正如与立即数、或立即数、异或立即数。</p><div class="warning"><p>注意：使用立即数的指令，立即数必须写在第三位。</p></div><h3 id="几条扩展指令">几条扩展指令</h3><ul class="lvl-0"><li class="lvl-2"><p><code>li</code>：<code>li rs, immediate</code>，将立即数赋给寄存器。</p></li><li class="lvl-2"><p><code>move</code>: <code>move rs, rt</code>, 将后一个寄存器的值赋给前一个寄存器。</p></li><li class="lvl-2"><p><code>la</code>：<code>la rd, label</code>，将标签对应的地址（十六进制值）赋给寄存器，后续我们讨论地址和内存的细节内容。</p></li></ul><h3 id="加减法">加减法</h3><p>本节介绍 <code>add sub addu subu addi addiu</code> 几种加减法运算。</p><p>四则运算和位运算相比多了两个棘手的问题，即符号和溢出。</p><blockquote><p>首先来谈正负性的问题，其实这根本就不是个问题。如果你是补码领域大神的话，你就会发现，在不考虑位溢出的情况下（这里“不考虑位溢出”的意思是发生溢出时会将溢出位舍去，相反“考虑溢出”的意思是如果发生溢出直接报错），二进制补码的正负性其实是相同的，这也正是补码的优越之处。不信可以看看下面这些例子：</p><p>在 32 位的条件下，<code>0x3 + 0xffffffff</code> 的结果是多少？你的做法或许是这样的：首先，你发现 <code>0xffffffff</code> 的最高位是 <code>1</code> ，于是断定它是负数，将其一段操作转换成 <code>-1</code> ，再与 <code>0x3</code> 相加，得到结果 <code>0x2</code> 。但实际上，我直接把它们两个相加，结果就是 <code>0x100000002</code> ，舍去溢出的最高位，直接就得到了 <code>0x2</code> 。</p><p>再举一个例子，同样是在 32 位的条件下，<code>0xfffffffd - 0xffffffff</code> 的结果是多少？细心的你可能会将这个式子转换成 <code>(-3) - (-1)</code> ，结果是 <code>-2</code> ，也就是 <code>0xfffffffe</code> 。但是我不管正负，直接进行运算，发现被减数小于减数，我直接在被减数前面补一个溢出位 1 ，于是原式变成 <code>0x1fffffffd - 0xffffffff</code> ，结果等于 <code>0xfffffffe</code> 。</p><p><em>摘自原书</em></p></blockquote><p>这是 <code>addu</code>（无符号加） 和 <code>subu</code>（无符号减）的原理。因为它们把操作数当作无符号数直接运算，然后直接把溢出部分舍去。<ins>但是其运算结果还是有符号的！！！</ins></p><p>而 <code>add</code> 和 <code>sub</code> 则不会简单地舍去溢出位，而是在溢出时抛出异常。如果使用这种运算，需要注意判断是否溢出。</p><p>此外 <code>add</code> 和 <code>addu</code> 也有它们的立即数版本 <code>addi</code> 和 <code>addiu</code>（注意不是 <code>addui</code>），<ins>而 <code>subi</code> 和 <code>subiu</code> 是伪指令</ins>，和上面一样它们也必须把立即数放在第三位。</p><h3 id="乘除法">乘除法</h3><p>本节介绍 <code>mult div mfhi mflo mthi mtlo</code> 几种乘除法运算。</p><p>加减法至多只溢出一位，而乘除法则不然，两个 32 位数字相乘，结果可达 64 位，必须要用新的处理方法。<br>于是我们想到了之前提到的<a href="#specialReg">特殊寄存器</a> <code>HI</code> 和 <code>LO</code>，在乘法运算的时候，直接把高 32 位放到 <code>HI</code> 寄存器里面，低 32 位放到 <code>LO</code> 寄存器里面，就万事大吉了。用法 <code>mult rs, rt</code>，即把 <code>rs</code> 和 <code>rt</code> 两个寄存器的内容相乘。</p><div class="tips"><p>为什么不要指定结果保存的位置？<br>因为结果放到了 <code>HI</code> 和 <code>LO</code> 里面，自然就只需要指定两个操作数的寄存器了。</p></div><p>这两个是特殊寄存器，不能直接调用，要想使用里面的数，必须提前取出来，这就是 <code>mfhi</code> 和 <code>mflo</code> 存在的意义。用 <code>mfxx rs</code> 把 <code>HI</code> 或者 <code>LO</code> 寄存器的值存入 <code>rs</code> 寄存器。<br>当然也有反过来的用法，即手动把数字写进 <code>HI</code> 和 <code>LO</code> 寄存器。用 <code>mthi</code> 和 <code>mtlo</code> 指令。用 <code>mthi rs</code> 把 <code>rs</code> 寄存器的值存入 <code>HI</code> 寄存器，用 <code>mtlo rs</code> 把 <code>rs</code> 寄存器的值存入 <code>LO</code> 寄存器。</p><p>除法也利用这两个寄存器，不过是 <code>HI</code> 存<ins>余数</ins>而 <code>LO</code> 存<ins>商</ins>。切勿记反。切勿记反。切勿记反。<br>若除数是负数，处理方法与 C 语言中相同：被除数为正数时，余数为 0 或正数；被除数为负数时，余数为 0 或负数。如下表：</p><table><thead><tr><th>被除数</th><th>除数</th><th>商</th><th>余数</th></tr></thead><tbody><tr><td>7</td><td>3</td><td>2</td><td>1</td></tr><tr><td>7</td><td>-3</td><td>-2</td><td>1</td></tr><tr><td>-7</td><td>3</td><td>-2</td><td>-1</td></tr><tr><td>-7</td><td>-3</td><td>2</td><td>-1</td></tr></tbody></table><h3 id="几个单位">几个单位</h3><p>自此节开始要进入内存的学习，先通过了解单位来入门。</p><ol><li class="lvl-3"><p>位（bit）: 1 位代表 1 个 二进制值（0 或 1）。比如二进制数 <code>0b10110</code> 就是 5 位。<ins>十六进制数 <code>0xabcd</code> 的每一个数字都能转换成 4 位二进制数</ins>，所以这个数是 16 位。</p></li><li class="lvl-3"><p>字节（byte）: 8 位组成 1 个字节。一个 32 位的寄存器，其大小就是 4 字节。<ins>字节是地址的基本单位</ins>。</p></li><li class="lvl-3"><p>半字（halfword）: 16 位组成 1 个半字。</p></li><li class="lvl-3"><p>字（word）: 32 位组成 1 个字。</p></li></ol><p><img src="/posts/1f9d902/address.png" alt="address"></p><p>红色：8 位，1 字节蓝色：16 位，1 半字绿色：32 位，1 字</p><h3 id="地址">地址</h3><p>内存空间连续而庞大，由于其连续，我们从 0 开始为其编号，称为地址。要注意每个地址代表的空间是 8 位，即一字节。也就是说字节是地址的基本单位。<br>举例来说，倘若要把数据 <code>0x12345678</code> 存储地址 <code>0x0</code>，那么按每个地址存入 8 位的逻辑，<code>0x0 0x1 0x2 0x3</code> 四个地址存入了 32 位，刚好存下这串数字。</p><h4 id="小端存储">小端存储</h4><p>小端存储指的是数据的低位字节保存在内存的低地址中。以上面的存储为例，数据的低位字节是 <code>0x78</code>，保存在地址 <code>0x0</code> 中、<code>0x56</code> 存储在 <code>0x1</code> 中，以此类推。</p><h4 id="大端存储">大端存储</h4><p>大端存储则相反，数据低位字节存储在内存的高地址中。此处不再举例。</p><h3 id="按字访存">按字访存</h3><p>本节介绍 <code>lw sw</code> 两个访存指令。</p><p>顾名思义，上述两个指令表示 <code>store word</code> 和 <code>load word</code>，即向内存中存储或读取一个字。<br><code>sw rt, offset(rs)</code> 表示将 <code>rt</code> 这个寄存器的内容写入 “<code>rs</code> 寄存器中储存的值 + <code>offset</code> 这个<ins>立即数</ins>或<ins>标签</ins>表示的地址”表示的地址处。<br>略微有点绕。举例而言，<code>$t1 = 0x12345678</code> <code>$t2 = 0x00000007</code>，若要把 <code>$t1</code> 的值储存到地址 <code>0x8</code> 和 <code>0x4</code> 那么分别要如何写呢？<br>答案是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">1</span>($<span class="built_in">t2</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, -<span class="number">3</span>($<span class="built_in">t2</span>)</span><br></pre></td></tr></table></figure><p>这就是所谓“表示的地址 + 偏移量”表示的地址。<br>要注意，括号中只能是一个寄存器。来看以下例子：<br>想要构建一个 <code>int</code> 类型数组，首地址为标签 <code>arr</code>，那么如何将 <code>$t1</code> 存入 <code>arr[3]</code> ？<br>首先我们要明确，<code>int</code> 类型是 4 字节，即一个数要占用 4 个地址。那么 <code>arr[3]</code> 的起始地址是 <code>arr + 12</code>。那么你有可能写成下面的形式：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">12</span>(arr)</span><br></pre></td></tr></table></figure><p>这就掉入了惯性思维的陷阱。<code>arr</code> 可以放在括号内吗？甚不然也。因为 <code>arr</code> 只是一个标签，而标签在编译时会被翻译成立即数，而立即数是不能放在括号内的。<br>正确的写法应该是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li $<span class="built_in">t2</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, arr($<span class="built_in">t2</span>)</span><br></pre></td></tr></table></figure><p>也就是说，先用一个寄存器把偏移量 12 保存下来，再加上 <code>arr</code> 标签得到 <code>arr + 12</code>，再用这个地址作为 <code>sw</code> 指令的第二个参数。</p><div class="tips"><p>一般来说我们在括号里写基位置 <code>base</code>，括号外是偏移量 <code>offset</code>。但是这不是绝对的！上面我们就把偏移量写在内而基位置写在外，得到了一样的效果。</p></div><p><code>lw</code> 要注意的事项与上面一致，只不过作用是把后面的地址中保存的值取到了前面的寄存器中。</p><div class="warning"><p>注意：<code>lw</code> 和 <code>sw</code> 第二个参数计算出的地址必须合法（在内存范围内，且非负），且为 4 的倍数，否则会抛出异常！</p></div><h4 id="与-move-和-la-的区别">与 move 和 la 的区别</h4><p>这时候你可能会有疑惑：<code>move $t1, $t2</code> 和 <code>lw $t1, 0($t2)</code> 有区别吗？答案是有的。因为 <code>move</code> 做的是把第二个寄存器的值直接赋给第一个寄存器，而 <code>lw</code> 做的是根据第二个寄存器的值<ins>去内存空间找相应的地址保存的数据</ins>，再赋给第一个寄存器。<br><code>la</code> 也是如此，<code>la $t1, label</code> 把标签表示的地址直接赋给了第一个寄存器，而 <code>lw $t1, label($0)</code> 则是根据标签表示的地址去内存中找到数据，赋给第一个寄存器。</p><p>也就是说，要注意地址和地址保存的数的区别。地址本身也是一串数，而这串数相当于一个门牌号，门后面就是这个地址保存的数。</p><h3 id="按半字、字节访存">按半字、字节访存</h3><p>本节将介绍 <code>sh lh sb lb</code> 几个访存指令。</p><p><code>sh lh</code> 全称 <code>store halfword</code> 和 <code>load halfword</code>，用于将一个半字（2 字节，16 位）从寄存器写入内存，或反过来。<br><code>sb lb</code> 全称 <code>store byte</code> 和 <code>load byte</code>，用于将一个字节（8 位）从寄存器写入内存，或反过来。</p><p>这四条指令用法和 <code>lw sw</code> 一致，不再赘述。只有一些细节需要关注：</p><ul class="lvl-0"><li class="lvl-2"><p><code>sh lh</code> 要求计算出的地址是 2 的倍数，而 <code>sb lb</code> 没有要求。</p></li><li class="lvl-2"><p><code>sh sb</code> 指令在将第一个寄存器的值存入内存中时，倘若寄存器中的值超过了标定的位数，则会将高位舍去，只存入低位。<br>比如 <code>$t1 = 0x12345678</code>。现在执行 <code>sb $t1 offset(base)</code>，那么只有 <code>$t1</code> 中的低 8 位会被存入内存（<code>0x78</code> 小端存储），高 24 位会被舍去。</p></li><li class="lvl-2"><p><code>lh lb</code> 指令在寄存器中已经有值的情况下往里面存数据时，会从低到高存入所需的数据，其余直接置 0。<br>比如 <code>$t1 = 0x12345678</code>。现在执行 <code>lb $t1 offset(base)</code>。如果地址保存的数是 <code>0xab</code>，那么 <code>$t1</code> 的低 8 位会写入 <code>0xab</code> 而高 24 位直接置 0，即变成 <code>0x000000ab</code>。</p></li></ul><h3 id="跳转指令">跳转指令</h3><h4 id="绝对跳转">绝对跳转</h4><p>本节将介绍 <code>j jal jr jalr</code> 几条跳转指令。</p><p>跳转指令有点像 C 语言中的 <code>goto</code>，可以将程序运行的位置跳转到指定位置。</p><p><code>j</code>，即 <code>jump</code>，只有一种用法就是 <code>j label</code>，把<code>label</code> 写在目的地的前一行，就可以在运行完 <code>j</code> 指令后立即跳转到 <code>label</code> 处执行。</p><div class="warning"><p><code>j</code> 指令的目的地只能用 <code>label</code> 来表示，不能直接用立即数。</p></div><p><code>label</code> 标识了目的地这行指令的地址。也就是说每写一行指令，都会转换成机器码在内存中保存，占用一个地址。前面所说 <code>sw sh sb</code> 指令会往内存写入数据，也占用地址。储存数据区和储存指令区是分开的，前者占用 <code>0x00000000 - 0x00002fff</code> 段，被称为 <code>.data</code> 段，后者占用 <code>0x00003000</code> 往后，被称作 <code>.text</code> 段。</p><div class="tips"><p>MIPS 语言中的每条指令，转换为机器码都固定为 32 位，所以每条指令的地址 Address 也会按照顺序每条 +4 递增。</p></div><p><code>jal jr</code>，是一对指令，需要同时出现。<code>jal label</code> 同样可以跳转到 <code>label</code> 对应的位置，但它会把当前指令的<ins>下一条指令</ins>的地址写入 31 号寄存器 <code>$ra</code> 中，即 <code>PC + 4</code>，<code>PC</code> 即当前指令的地址。<code>jr $ra</code> 则又回到　<code>jal</code> 的下一行继续执行。</p><div class="note info">            <p>理论上，<code>jr</code> 后可以接任意寄存器，它的作用本质上是将寄存器中的数当作地址，实现跳转。但一般和 <code>jal</code> 搭配使用。</p>          </div><div class="tips"><p>为什么不跳回到 <code>jal</code> 的地址？<br>因为这样会导致 <code>jal</code> 再次执行，造成跳转的死循环。</p></div><p><code>jalr</code>，是 <code>jal</code> 和 <code>jr</code> 的组合指令。<code>jalr</code> 要指定两个寄存器，用来保存 目的地 和 <code>PC + 4</code>，例如 <code>jalr $t1, $t2</code> 是跳转到 <code>$t2</code> 寄存器保存的地址，并把当前指令的<ins>下一条指令</ins>的地址写入 <code>$t1</code> 寄存器中。</p><h4 id="相对跳转">相对跳转</h4><p>本节将介绍 <code>beq bne bgtz bgez bltz blez</code> 几条条件跳转指令。</p><p>条件跳转指令的特点是可以根据一定的条件选择是否跳转。</p><p><code>beq</code>，即 <code>branch equal</code>，表示当两个寄存器的值相等时，跳转到目的地。<code>beq $t0, $t1, label</code>。</p><p>相对应的是 <code>bne</code> 即 <code>branch not equal</code>，在 <code>$t0 !=  $t1</code> 时跳转。</p><p>除了等于比较，当然还有大于，小于比较。于是就有了 <code>bgt</code>（<code>branch if greater than</code>）、<code>bge</code>（<code>branch if greater or equal</code>）、<code>blt</code>（<code>branch if less than</code>）、<code>ble</code>（<code>branch if less or equal</code>）四条指令。</p><p>要注意，以上的指令是<ins>有符号</ins>比较的，如认为 <code>0x0</code> 大于 <code>0xffffffff</code>，于是又有了这四条指令的无符号变种，即 <code>bgtu</code>、<code>bgeu</code>、<code>bltu</code>、<code>bleu</code>。</p><p>有时候我们需要将寄存器的值和 0 比较，这很简单，只要把上述指令的第二个操作数用 <code>$0</code> 替换即可。但是 MIPS 提供了更优雅的处理方法：对于 <code>beq bne bgt bge blt ble</code> 这六条指令，在后面加上字母 <code>z</code> ，变成 <code>beqz bnez bgtz bgez bltz blez</code> ，就可以表示和 0 进行比较，相应地，第二个寄存器参数就被取消掉了。例如 <code>bgez $t0, label</code> 指令，就表示如果 <code>$t0</code> 寄存器中的值大于等于 0 ，则跳转到 <code>label</code> 标签所在的位置；否则不跳转。</p><blockquote><p>（你问我为什么 <code>bgtu bgeu bltu bleu</code> 后面不能加字母 <code>z</code> ？再仔细想想，你会为这个问题感到好笑的~）</p></blockquote><p>考察相对跳转指令中，<code>label</code> 被翻译成了什么：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li $<span class="built_in">s0</span>, <span class="number">1</span></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, target3</span><br><span class="line">li $<span class="built_in">t6</span>, <span class="number">7</span></span><br><span class="line"><span class="symbol">target3:</span></span><br><span class="line">li $<span class="built_in">t7</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure><p><img src="/posts/1f9d902/label.png" alt="label"></p><p>Amazing 啊，这个 <code>target3</code> 并没有像绝对跳转指令那样被翻译成了 <code>li $t7, 8</code> 这条指令的地址，而是一个神奇的 <code>0x00000001</code>。<br>原来，条件跳转指令又被叫做相对跳转指令不是没有原因的。它的目的地不是一个指令的地址，而是<ins>相对跳转指令</ins>和<ins>目的地</ins>之间的<ins>指令条数</ins>。<br>什么意思呢？上例中目的地是 <code>target3</code>，<code>beq</code> 和它中间隔了一条 <code>li $t6, 7</code> 指令，所以相对距离是 1。倘若二者中间再加一条 <code>li $t5, 5</code> 之类的指令，那么相对距离就变成 2。</p><h3 id="移位运算">移位运算</h3><p>本节将介绍 <code>sll srl sra sllv srlv srav lui</code> 几条移位运算指令。</p><p>左移只有一种，那就是 <code>shift left logical</code>，<code>sll</code>。使用 <code>sll $t1, $t0, imm5</code>，即把 <code>$t0</code> 的数左移 <code>imm5</code> 位，结果存入 <code>$t1</code>。<code>imm5</code> 表示这个立即数最高只有 5 位，即左移的位数只能是 0 到 31。</p><p>右移情况则要复杂。它分为逻辑右移（高位补 0）和算术右移（高位补符号位）。逻辑右移的指令是 <code>srl</code>（<code>shift right logical</code>），算术右移的指令是 <code>sra</code>（<code>shift right arithmetic</code>），用法和 <code>sll</code> 指令完全相同。</p><p>除了以立即数为移动位数，还可以使用寄存器中的值作为移动位数。这就需要用到 <code>sllv srlv srav</code> 指令了。在使用指令时，将 <code>imm5</code> 替换为寄存器即可。如 <code>sllv $t1, $t0, $s0</code> ，就是将 <code>$t0</code> 寄存器中的数据左移 <code>$s0</code> 寄存器中的数据这些位，存入 <code>$t1</code> 寄存器中。</p><p>倘若寄存器中的值超过了 5 位，那么会舍弃高位，只保留低 5 位作为移动位数。</p><p>最后是 <code>lui</code> 即 <code>load upper immediate</code>。它把一个立即数左移 16 位然后再写入寄存器，用法 <code>lui $t0, imm16</code> 。例如 <code>lui $t0, 0x1234</code> 的结果就是向 <code>$t0</code> 寄存器中写入 <code>0x12340000</code> 。</p><h3 id="条件赋值">条件赋值</h3><p>本节将介绍 <code>slt sltu slti sltiu</code> 几条条件赋值指令。</p><p><code>slt</code> (<code>set less than</code>) 指令表示如果 <code>$t0</code> 中的值小于 <code>$t1</code> 中的值，则将 <code>$t2</code> 中的值设置为 1，否则设置为 0。<br>用法：<code>slt $t2, $t0, $t1</code>。</p><p>当然这也是有符号的比较，无符号变种是 <code>sltu</code>。除此之外还有和立即数比较的变种 <code>slti</code> 和 <code>sltiu</code>。</p><hr><h1 id="MIPS-语法">MIPS 语法</h1><h2 id="条件语句">条件语句</h2><p>对于下面这个简单的 C 语言条件语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">  a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">c = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>可以巧妙地利用跳转指令来在 MIPS 中实现：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bgt </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, <span class="keyword">branch1 </span><span class="comment"># bgt: branch greater than, $s0 = a, $s1 = b</span></span><br><span class="line"><span class="keyword">j </span><span class="keyword">branch2 </span><span class="comment"># else</span></span><br><span class="line"><span class="keyword">branch1:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s0</span>, <span class="number">0</span> <span class="comment"># a = 0</span></span><br><span class="line">  <span class="keyword">j </span>end <span class="comment"># end of if statement</span></span><br><span class="line"><span class="keyword">branch2:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s1</span>, <span class="number">0</span> <span class="comment"># b = 0</span></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">li $<span class="built_in">s2</span>, <span class="number">0</span> <span class="comment"># c = 0</span></span><br></pre></td></tr></table></figure><p>简单来说，我们把 <code>if</code> 换成了 <code>b</code> 型跳转指令（相对跳转，因为 <code>if</code> 和其一样包含了条件判断），而 <code>else</code> 换成了 <code>j</code> 型跳转指令（前面已经做过条件判断了），从而实现分支的分离。</p><p>要注意，branch1 的结尾我们使用 <code>j end</code> 来强制脱离条件块，否则会进入 branch2。</p><p>如果增加一个分支，让 <code>a == b</code> 时把 <code>a b</code> 均设为 0，要如何写呢？</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bgt </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, <span class="keyword">branch1 </span><span class="comment"># $s0 = a, $s1 = b</span></span><br><span class="line"><span class="keyword">blt </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, <span class="keyword">branch2 </span><span class="comment"># else if a &lt; b</span></span><br><span class="line"><span class="keyword">j </span><span class="keyword">branch3 </span><span class="comment"># else</span></span><br><span class="line"><span class="keyword">branch1:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">j </span>end</span><br><span class="line"><span class="keyword">branch2:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s1</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">j </span>end</span><br><span class="line"><span class="keyword">branch3:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s0</span>, <span class="number">0</span></span><br><span class="line">  li $<span class="built_in">s1</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">  li $<span class="built_in">s2</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>倘若条件判断更复杂，比如要同时满足两个条件（<code>&amp;&amp;</code>，与）或者至少满足一个条件（<code>||</code>，或）该怎么处理？</p><p>其实不难，如果要至少满足一个条件才能进入的代码块，我们可以让这几个条件满足时跳转到同一个分支：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b || b &gt; c)</span><br><span class="line">&#123;</span><br><span class="line">  a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">c = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>对应的 MIPS 代码如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bgt </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, <span class="keyword">branch1</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bgt </span>$<span class="built_in">s1</span>, $<span class="built_in">s2</span>, <span class="keyword">branch1 </span><span class="comment"># or</span></span><br><span class="line"><span class="keyword">j </span><span class="keyword">branch2 </span><span class="comment"># else</span></span><br><span class="line"><span class="keyword">branch1:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">j </span>end</span><br><span class="line"><span class="keyword">branch2:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s1</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">  li $<span class="built_in">s2</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果是逻辑与，要怎么实现呢？毕竟一条指令只能判断一个条件，不能同时判断多个，比如下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b &amp;&amp; b &gt; c)</span><br><span class="line">&#123;</span><br><span class="line">  a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">c = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>其实我们不是非要把逻辑与写成 <code>&amp;&amp;</code> 的样子，在 C 语言中我们要讲求代码编写的优雅，而在这里我们需要明晰其本质：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (b &gt; c)</span><br><span class="line">  &#123;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    b = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">c = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>就是说，两个条件只有都满足才能使 <code>a</code> = 0，其余情况都是 <code>b</code> = 0。用一个条件语句的嵌套来实现了这个效果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bgt </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, <span class="keyword">branch1 </span><span class="comment"># if outside</span></span><br><span class="line"><span class="keyword">j </span><span class="keyword">branch2 </span><span class="comment"># else outside</span></span><br><span class="line"><span class="keyword">branch1: </span></span><br><span class="line">  <span class="keyword">bgt </span>$<span class="built_in">s1</span>, $<span class="built_in">s2</span>, <span class="keyword">branch3 </span><span class="comment"># if inside</span></span><br><span class="line">  <span class="keyword">j </span><span class="keyword">branch2 </span><span class="comment"># else inside = else outside !!!</span></span><br><span class="line"><span class="symbol">  branch3:</span></span><br><span class="line">    li $<span class="built_in">s0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">j </span>end</span><br><span class="line"><span class="keyword">branch2:</span></span><br><span class="line"><span class="keyword"></span>  li $<span class="built_in">s1</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">  li $<span class="built_in">s2</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="循环语句">循环语句</h2><h3 id="While">While</h3><p>while 循环有两种写法，譬如下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">  b = a;</span><br><span class="line">  a++;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>一种是“进入循环时条件跳转，离开循环时绝对跳转”：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">li $<span class="built_in">s0</span>, <span class="number">0</span> <span class="comment"># a = 0 循环变量</span></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">5</span> <span class="comment"># 循环次数</span></span><br><span class="line"><span class="symbol">while:</span></span><br><span class="line">  <span class="keyword">blt </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, loop <span class="comment"># a &lt; 5</span></span><br><span class="line">  <span class="keyword">j </span>end <span class="comment"># a &gt;= 5</span></span><br><span class="line"><span class="symbol">  loop:</span></span><br><span class="line">    <span class="keyword">move </span>$<span class="built_in">s1</span>, $<span class="built_in">s0</span> <span class="comment"># b = a</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">s0</span>, $<span class="built_in">s0</span>, <span class="number">1</span> <span class="comment"># a++</span></span><br><span class="line">    <span class="keyword">j </span>while <span class="comment"># 循环</span></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">  li $<span class="built_in">s0</span>, <span class="number">0</span> <span class="comment"># a = 0</span></span><br></pre></td></tr></table></figure><p>这种写法在循环条件用 <code>||</code> 连接时很方便修改，只需要增加一个到 <code>loop</code> 的条件跳转指令即可。</p><p>一种是“进入循环时不跳转，离开循环时条件跳转”：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">li $<span class="built_in">s0</span>, <span class="number">0</span> <span class="comment"># a = 0 循环变量</span></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">5</span> <span class="comment"># 循环次数</span></span><br><span class="line"><span class="symbol">while:</span></span><br><span class="line">  <span class="keyword">bge </span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, end <span class="comment"># a &gt;= 5, break</span></span><br><span class="line">    <span class="keyword">move </span>$<span class="built_in">s1</span>, $<span class="built_in">s0</span> <span class="comment"># b = a</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">s0</span>, $<span class="built_in">s0</span>, <span class="number">1</span> <span class="comment"># a++</span></span><br><span class="line">    <span class="keyword">j </span>while <span class="comment"># 循环</span></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">  li $<span class="built_in">s0</span>, <span class="number">0</span> <span class="comment"># a = 0</span></span><br></pre></td></tr></table></figure><p>这种写法在循环条件用 <code>&amp;&amp;</code> 连接时很方便修改，只需要增加一个到 <code>end</code> 的条件跳转指令即可。</p><div class="tips"><p>这种写法相当于给循环条件取了个反。</p></div><h3 id="For">For</h3><p>for 循环可以等价转换成 while 循环，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i * i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i * i &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组">数组</h2><h3 id="一维数组">一维数组</h3><p>我们可以在 <code>.data</code> 段中开辟一段连续的内存空间作为数组存储数据。比如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">.data</span></span><br><span class="line"><span class="symbol">array1:</span> <span class="meta">.space</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">array2:</span> <span class="meta">.space</span> <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li $<span class="built_in">s0</span>, <span class="number">1</span>   <span class="comment"># $s0 = 1</span></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">2</span>   <span class="comment"># #s1 = 2</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">0</span></span><br><span class="line">li $<span class="built_in">t1</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s0</span>, array1($<span class="built_in">t0</span>)   <span class="comment"># array1[0] = $s0</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s1</span>, array1($<span class="built_in">t1</span>)   <span class="comment"># array1[1] = $s1</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s0</span>, array2($<span class="built_in">t0</span>)   <span class="comment"># array2[0] = $s0</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s1</span>, array2($<span class="built_in">t1</span>)   <span class="comment"># array2[1] = $s1</span></span><br></pre></td></tr></table></figure><p>首先要注意 <code>.space</code> 开辟的空间是以<ins>字节</ins>为单位的。因此这里 <code>array1</code> 的大小为 20 字节，如果存储 int 类型的数据只能存储 5 个。</p><div class="note warning">            <p>我们要存储的每个数据都要占据 4 个字节的空间（哪怕是只占据 1 字节的 <code>char</code> 型数据也建议直接用 4 字节来存储，我们的内存足够多，不需要担心不够用，使用 4 字节存储和寄存器的位数一致，也可以非常方便地使用 sw 和 lw 指令直接进行存取，也可以降低出错的概率。</p>          </div><p><code>array1</code> 和 <code>array2</code> 两个标签在用 <code>lw</code> 或 <code>sw</code> 的时候都会被翻译成立即数，作为地址。实际上，它们代表的正是数组的首地址。在上面的例子中，若 <code>.data</code> 段是从 <code>0x00000000</code> 开始，那么 <code>array1</code> 就是 <code>0x00000000</code>，而 <code>array2</code> 就是 <code>0x00000014</code>（即十进制的 20）。因为 <code>array1</code> 占据了 <code>0x00000000</code> 到 <code>0x00000013</code> 的 20 字节空间，<code>array2</code> 就顺延下来了。</p><div class="warning"><p>重申一次，最好保证在申请数组时，申请的字节数永远都能够被 4 整除！</p></div><p>要注意，访问数组中的值时，我们往往需要一个寄存器来保存数组的索引，这时候寄存器的值不应当是数组的下标，而是下标乘以 4 的结果。为简便计算，我们一般用位运算来计算，比如 <code>sll $t1, $t0, 2</code> 就可以将 <code>$t0</code> 中的值乘以 4 放入 <code>$t1</code> 中。</p><h3 id="二维数组">二维数组</h3><p>我们知道二维数组在存储时其实是按照一位数组的格式来存的，即第一行、第二行、第三行……紧密排列。例如在一个 m 行 n 列的二维数组 <code>matrix</code> 中，<code>matrix[i][j]</code> 和 <code>matrix[i * n + j]</code> 并没有什么区别。所以 <code>(i * n + j) * 4</code> 就是访问 <code>matrix[i][j]</code> 的地址，即寄存器中保存的值。</p><h2 id="字符串">字符串</h2><p>字符以 ASCII 码的形式存储。</p><p>在内存中，字符是按照顺序从低地址到高地址排列的。比如 <code>hello</code> 这个字符串，其中 <code>h</code> 最先写入，并写入到这个字（即 4 字节）的最低位，假定为 0x00，那么 <code>h e l l</code> 分别就是 <code>0x00 0x01 0x02 0x03</code>，<code>o</code> 被保存到下一个字去，为 <code>0x04</code>。</p><p>有两条伪指令来写入字符串：</p><ul class="lvl-0"><li class="lvl-2"><p>.asciiz<br>在字符数组末尾自动添加 <code>\0</code>。</p></li><li class="lvl-2"><p>.ascii<br>不会自动添加 <code>\0</code>。</p></li></ul><p>和 C 语言一样，MIPS 字符串也要以 <code>\0</code> 结尾。</p><div class="tips"><blockquote><p>在 <code>.data</code> 段要同时声明数组和字符串的情况，请记住一定要先声明数组，再声明字符串！道理其实很简单，因为如果先声明字符串的话，如果字符串的字节数不能被 4 整除，数组的首地址就又跑到不能被 4 整除的地方去了（叹气）。</p></blockquote></div><div class="tips"><p>一般地，能用 <code>.asciiz</code> 就别用 <code>.ascii</code>。</p></div><h2 id="宏">宏</h2><h3 id="宏的基本用法">宏的基本用法</h3><p>宏定义用于把重复的代码简化成一条语句，比如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> exit <span class="comment"># or .macro exit()</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line">exit <span class="comment"># or exit()</span></span><br></pre></td></tr></table></figure><p>调用宏的时候只需要使用宏名即可，若无参数，则有无括号都可以，但你也可以为其添加参数：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> getoffset(%ans, %i, %<span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span>  <span class="keyword">sll </span>%ans, %i, <span class="number">3</span> <span class="comment"># %ans = %i * 8</span></span><br><span class="line">  <span class="keyword">add </span>%ans, %ans, %<span class="keyword">j </span><span class="comment"># %ans += %j</span></span><br><span class="line">  <span class="keyword">sll </span>%ans, %ans, <span class="number">2</span> <span class="comment"># %ans *= 4</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>这是一个计算每行 8 列的二维数组中第 i 行第 j 列的元素地址的宏。由于关于数组的代码需要大量地获取元素地址，这样的宏就可以大幅节约代码量。</p><p>事实上，宏中带 <code>%</code> 的参量可以表示一条指令的任何一个部分，比如立即数：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> store(%p)</span><br><span class="line">  <span class="keyword">sw </span>$<span class="built_in">s1</span>, %p($<span class="number">0</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">1</span></span><br><span class="line">store(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>或者标签：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">str:</span> .asciiz <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> print(%str)</span><br><span class="line">  li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line">  la $<span class="built_in">a0</span>, %str</span><br><span class="line">  <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><p>甚至指令名：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> <span class="keyword">instr(%i)</span></span><br><span class="line"><span class="keyword"></span>  %i $<span class="built_in">s2</span>, $<span class="built_in">s3</span>, $<span class="built_in">s4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="keyword">instr(add)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">instr(sub)</span></span><br></pre></td></tr></table></figure><div class="tips"><p>当然，指令格式与宏定义的有差别的指令就不能用了，否则会报错。</p></div><p>还有宏内部的跳转：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> <span class="keyword">branch(%d)</span></span><br><span class="line"><span class="keyword"></span>  <span class="keyword">beqz </span>%d, iszero</span><br><span class="line">  <span class="keyword">j </span>end</span><br><span class="line"><span class="symbol">  iszero:</span></span><br><span class="line">    li %d, <span class="number">114514</span></span><br><span class="line"><span class="symbol">  end:</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">s0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">branch($s0)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">branch($s1)</span></span><br></pre></td></tr></table></figure><div class="warning"><p>不可从宏内跳到宏外，反之亦然。</p></div><p>甚至可以嵌套：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> para(%p)</span><br><span class="line">  <span class="keyword">instr(add)</span></span><br><span class="line"><span class="keyword"></span>  <span class="keyword">sw </span>$<span class="built_in">s1</span>, %p($<span class="built_in">s2</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> <span class="keyword">instr(%i)</span></span><br><span class="line"><span class="keyword"></span>  %i $<span class="built_in">s2</span>, $<span class="built_in">s3</span>, $<span class="built_in">s4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">1</span></span><br><span class="line">li $<span class="built_in">s3</span>, <span class="number">3</span></span><br><span class="line">para(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><div class="warning"><p>宏出现循环调用（比如 <code>para</code> 调用自己，或 <code>para</code> 调用 <code>instr</code>，而 <code>instr</code> 又调用 <code>para</code>），就会报错。</p></div><h3 id="宏实现函数">宏实现函数</h3><p>一般来说，我们约定俗成的参数寄存器是 <code>$a0 $a1 $a2 $a3</code> 这四个寄存器，分别存储函数的第 1、2、3、4 个参数。</p><p>若函数有返回值，我们有两种方法来用宏定义它：</p><ol><li class="lvl-3"><p>要求一个参数填入寄存器来保存返回值。</p></li><li class="lvl-3"><p>宏定义内写死返回值保存的位置，外部用 <code>move</code> 指令提取之。</p></li></ol><p>第一种比如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> my_add(%a, %<span class="keyword">b, </span>%c)</span><br><span class="line">  <span class="keyword">add </span>%c, %a, %<span class="keyword">b</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">s0</span>, <span class="number">1</span></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">2</span></span><br><span class="line">my_add($<span class="built_in">s0</span>, $<span class="built_in">s1</span>, $<span class="built_in">s2</span>) <span class="comment"># s2 = s0 + s1</span></span><br><span class="line">my_add($<span class="built_in">s0</span>, $<span class="built_in">s1</span>, $<span class="number">0</span>) <span class="comment"># no return</span></span><br></pre></td></tr></table></figure><div class="tips"><p>小技巧：<code>$0</code> 永远是 0，让它保存返回值，相当于没有返回值。</p></div><p>第二种：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> my_add(%a, %<span class="keyword">b)</span></span><br><span class="line"><span class="keyword"></span>  <span class="keyword">add </span>$<span class="built_in">v0</span>, %a, %<span class="keyword">b</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">s0</span>, <span class="number">1</span></span><br><span class="line">li $<span class="built_in">s1</span>, <span class="number">2</span></span><br><span class="line">my_add($<span class="built_in">s0</span>, $<span class="built_in">s1</span>) <span class="comment"># v0 = s0 + s1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s2</span>, $<span class="built_in">v0</span> <span class="comment"># s2 = v0</span></span><br></pre></td></tr></table></figure><h3 id="宏实现递归">宏实现递归</h3><p>首先明确一点，要在不同的函数栈上实现跳转，我们应该使用 <code>jal jr</code> 这对指令。在跳转时使用 <code>jal</code>，执行完后使用 <code>jr</code> 跳转回来。但是 <code>jr</code> 的目的地是 <code>$ra</code> 这个寄存器，专门保存 <code>jal</code> 的下一条指令的地址，让我们设想这样一个场景：</p><ul class="lvl-0"><li class="lvl-2"><p>进入函数 <code>f</code></p></li><li class="lvl-2"><p><code>f</code> 中再次调用 <code>f</code></p></li><li class="lvl-2"><p>第二层 <code>f</code> 满足结束条件，回到第一层 <code>f</code></p></li><li class="lvl-2"><p>第一层 <code>f</code> 满足结束条件，回到主程序</p></li></ul><p><code>f</code> 的结构大致是这样的：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jal </span>f <span class="comment"># 主程序调用 f</span></span><br><span class="line">下一条指令</span><br><span class="line"></span><br><span class="line">f:</span><br><span class="line">  满足条件则跳转到 f_end</span><br><span class="line">  函数逻辑</span><br><span class="line">  <span class="keyword">jal </span>f</span><br><span class="line">  <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">f_end:</span></span><br><span class="line">  <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>乍一看非常之正确：主程序调用 <code>f</code>，<code>f</code> 执行到 <code>jal f</code> 后回到 <code>f</code> 的开头，满足条件跳转到 <code>f_end</code>，<code>f_end</code> 回到 <code>jal</code> 后一句，即 <code>jr $ra</code>，然后回到主程序。</p><p>对……对吗（</p><p>仔细一想，两个 <code>jr</code> 真能如愿跳转吗？实则不然。因为 <code>$ra</code> 只有一个，也就是说 <code>$ra</code> 的值是会被覆写的！！！</p><p>让我们再次分析：<code>f</code> 中第一次执行 <code>jal</code> 时，<code>$ra</code> 保存的是第一层中 <code>jr $ra</code> 这条指令的地址。第二层 <code>f</code> 中满足条件跳转到 <code>f_end</code>，然后回到了通过 <code>jr $ra</code> 回到了第一层的 <code>jr $ra</code>（有点绕），这里的 <code>$ra</code> 保存的仍然是第一层 <code>jr $ra</code> 的地址，也就是说原地 tp。<br>倘若递归次数更多，那么最后出现的情况就是 <code>jr $ra</code> 只能返回到最后一次调用 <code>f</code> 的位置，而不能如我们所想层层跳出。</p><p>所以我们需要用到栈来保存每层跳出的位置。</p><p>观察 MARS 界面右下角的寄存器界面，我们能够找到一个名为 <code>$sp</code> 的寄存器，它就是栈寄存器。和大多数寄存器不一样，它的初始值不是 0 ，而是 <code>0x00002ffc</code>。</p><p>操作系统中，栈是一个<ins>自顶向下</ins>的空间，先入栈的数据所在的地址反而大，后入栈的则小。</p><p>入栈实际上做了这么一件事：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span> <span class="comment"># 栈顶指针向下移动 4 字节</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) <span class="comment"># 保存 $s0 到栈顶</span></span><br></pre></td></tr></table></figure><p>出栈则是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lw </span>$<span class="built_in">s0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) <span class="comment"># 从栈顶取出 $s0</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span> <span class="comment"># 栈顶指针向上移动 4 字节</span></span><br></pre></td></tr></table></figure><p>在调用函数时，我更喜欢这样的出入栈方式：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> push(%r)</span><br><span class="line">  <span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line">  <span class="keyword">sw </span>%r, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> pop(%r)</span><br><span class="line">  <span class="keyword">lw </span>%r, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">  <span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">.end_macro</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop:</span></span><br><span class="line">  push($<span class="built_in">ra</span>)</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">jal </span>loop</span><br><span class="line">  ......</span><br><span class="line">  pop($<span class="built_in">ra</span>)</span><br><span class="line">  <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>即刚进入函数时就入栈，准备跳出函数前出栈。这样就能保证 <code>$ra</code> 始终保存的是正确的地址。同时，在递归函数内部存在多次调用自身的情况的时候，这种出入栈方式让你只用写一次出入栈指令。</p><p>还有一种如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> push(%r)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="keyword">sw </span>%d, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> pop(%r)</span><br><span class="line"><span class="keyword">lw </span>%d, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">.end_macro</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop:</span></span><br><span class="line">  ......</span><br><span class="line">  push($<span class="built_in">ra</span>)</span><br><span class="line">  <span class="keyword">jal </span>loop</span><br><span class="line">  pop($<span class="built_in">ra</span>)</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><div class="note danger">            <p>所有像 <code>$ra</code> 这样，自身要用，子函数要用，子函数用完自己还要接着用的寄存器（即有覆盖风险的），都需要进行出入栈操作。全部共享一个栈空间（用 <code>$sp</code> 调度）。</p>          </div><h2 id="系统调用">系统调用</h2><p>根据 <code>$v0</code> 的值不同，使用 <code>syscall</code> 命令的效果不同。以下是常用的调用命令：</p><table><thead><tr><th>$v0</th><th>功能</th><th>要求或结果</th></tr></thead><tbody><tr><td>1</td><td>print integer</td><td><code>$a0</code> = 要打印的数</td></tr><tr><td>4</td><td>print string</td><td><code>$a0</code> = 要打印的字符串（<code>\0</code> 结尾）地址</td></tr><tr><td>5</td><td>read integer</td><td><code>$v0</code> = 读入的数</td></tr><tr><td>10</td><td>exit program</td><td>/</td></tr><tr><td>11</td><td>print character</td><td><code>$a0</code> = 要打印的字符</td></tr><tr><td>12</td><td>read character</td><td><code>$v0</code> = 读入的字符</td></tr></tbody></table><div class="note info">            <p>详见<a href="https://p0ach1l.github.io/2025/03/04/MIPS%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/#MIPS%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%A0%81">《MIPS 基础入门》——能打八个攻城狮</a>。</p>          </div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>指令中设定好的常数，可以直接参与运算，一般为 16 位 二进制。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>用于使程序更简单清晰。标签用于表示一个地址，以供指令来引用。一般用于表示一个数据存取的地址（类似于数组名）、或者一个程序跳转的地址（类似于函数名，或者 C 语言中 <code>goto</code> 的跳转目标）。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%84%E6%88%90%E5%8E%9F%E7%90%86/">計算機組成原理</category>
      
      
      <category domain="https://samuflore.top/tags/CO/">CO</category>
      
      <category domain="https://samuflore.top/tags/Pre/">Pre</category>
      
      <category domain="https://samuflore.top/tags/MIPS/">MIPS</category>
      
      <category domain="https://samuflore.top/tags/MARS/">MARS</category>
      
      <category domain="https://samuflore.top/tags/Assembly-Language/">Assembly Language</category>
      
      
      <comments>https://samuflore.top/posts/1f9d902/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[轉載]新川大陆文化史</title>
      <link>https://samuflore.top/posts/10425c0c/</link>
      <guid>https://samuflore.top/posts/10425c0c/</guid>
      <pubDate>Tue, 09 Sep 2025 02:34:17 GMT</pubDate>
      
      <description>&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;本文转载自神皇枫秀，敬请留意。&lt;/p&gt;
          &lt;/div&gt;
&lt;h1 id=&quot;新川大陆文化史&quot;&gt;新川大陆文化史&lt;/h1&gt;
&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;新川大陆的文明发展史是一部多元文化交融的史诗。从远古人类的起源分化，到各文明的兴衰更迭，这片土地见证了种族迁徙、技术革新、宗教演变与政治制度的不断创新。本书记述了从公元前2000年至公元1000年间，除川帝国外主要文明的发展历程，展现了斯特人、瓦伦人、伊塞尔人、米亚人等多个族群在探索、融合与抗争中共同谱写的文明篇章。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div class="note info">            <p>本文转载自神皇枫秀，敬请留意。</p>          </div><h1 id="新川大陆文化史">新川大陆文化史</h1><h2 id="引言">引言</h2><p>新川大陆的文明发展史是一部多元文化交融的史诗。从远古人类的起源分化，到各文明的兴衰更迭，这片土地见证了种族迁徙、技术革新、宗教演变与政治制度的不断创新。本书记述了从公元前2000年至公元1000年间，除川帝国外主要文明的发展历程，展现了斯特人、瓦伦人、伊塞尔人、米亚人等多个族群在探索、融合与抗争中共同谱写的文明篇章。</p><span id="more"></span><h2 id="第一章：人类起源与早期迁徙（公元前2000年之前）">第一章：人类起源与早期迁徙（公元前2000年之前）</h2><h3 id="1-1-人类共同祖先的分化">1.1 人类共同祖先的分化</h3><p>新川大陆的人类起源可追溯至远古时期的古人猿进化。根据《新川大陆民族发展简史》记载，古人猿主要分化为两个方向：</p><p>• <strong>兽向进化</strong>：形成<strong>林人</strong>，身形矫健，擅长山林间穿梭游居</p><p>• <strong>人向进化</strong>：形成<strong>山人</strong>，依靠智慧聚居于山洞，发展出早期社会组织</p><p>山人与林人的生存竞争构成了大陆文明的第一个重要分水岭。山人凭借更先进的工具使用能力和社会组织形式，在竞争中占据优势，迫使林人开始大规模迁徙，进而开启了新川大陆文明多样性的序幕。</p><h3 id="1-2-林人的三大迁徙路线">1.2 林人的三大迁徙路线</h3><p><strong>公元前2000年前后</strong>，山人与林人爆发决定性争斗，山人胜利后，林人被迫分为三大支系向不同方向迁徙：</p><p>• <strong>北迁支系</strong>：向寒冷的北方极地进发，逐渐适应严寒气候</p><p>• <strong>西南迁支系</strong>：进入干旱的沙漠戈壁地区，发展出耐旱生存技能</p><p>• <strong>西北迁支系</strong>：深入原始森林密布的西北山地，与野兽和复杂地形抗争</p><p>这一迁徙过程不仅是地理空间的拓展，更是文化多样性形成的关键阶段，为后来各文明的独特发展奠定了基础。</p><h3 id="1-3-山人的内部发展">1.3 山人的内部发展</h3><p>占据东部肥沃土地的山人，随着人口增长也开始分化为三支：</p><p>• <strong>海人</strong>：向东迁至沿海地区，发展渔业和航海文化</p><p>• <strong>川人</strong>：向平原地带发展，建立早期农业社会</p><p>• <strong>米亚人</strong>：沿河流建村，发展出与水资源密切相关的文化</p><p>山人与林人的分化与迁徙，构成了新川大陆文明发展的基本格局，为后续的文明碰撞与融合埋下了伏笔。</p><h2 id="第二章：远古探索时期（公元前2000年-公元前400年）">第二章：远古探索时期（公元前2000年-公元前400年）</h2><h3 id="2-1-北境文明的奠基：斯特人与斯尔吉亚雏形">2.1 北境文明的奠基：斯特人与斯尔吉亚雏形</h3><p><strong>公元前1700年前后</strong>，向北迁徙的林人分支在&quot;神之息&quot;山谷定居，逐渐演变为<strong>斯特人</strong>。他们选择的定居点位于摩尔吉亚河下游，这片山谷土地肥沃，四周环山，既提供了防御优势，又便于农业发展。斯特人在此建立了早期城镇<strong>坤达帖木儿</strong>，标志着北境第一个文明雏形的诞生。</p><p>斯特人发展出独特的山地农业技术，适应了北境较短的生长季节，并形成了以部落长老为核心的社会结构。他们崇拜山神，认为山脉是神灵的化身，这种信仰后来与川人的游牧文化融合，形成了斯尔吉亚文明的精神基础。</p><h3 id="2-2-西南沙漠的适应：瓦伦人的迁徙与定居">2.2 西南沙漠的适应：瓦伦人的迁徙与定居</h3><p><strong>公元前1600年前后</strong>，向西南迁徙的林人分支演变为<strong>瓦伦人</strong>。他们最初进入的裂空山谷地区气候干旱，生存条件恶劣，族群数量急剧减少。经过多年探索，瓦伦人最终穿越裂空山，发现了水源充沛、土地肥沃的<strong>裂龙山谷</strong>，并在此建立了<strong>拜亚城</strong>。</p><p>瓦伦人在裂龙山谷发展出独特的节水农业技术，他们建造了复杂的引水渠系统，将山泉水引入农田，成功在沙漠边缘开辟出绿洲。这种对水资源的精细管理能力，成为后来瓦伦迪亚商业文明的重要特征。</p><h3 id="2-3-西北山地的开拓者：伊塞尔人的分支发展">2.3 西北山地的开拓者：伊塞尔人的分支发展</h3><p><strong>公元前1400年前后</strong>，向西北迁徙的林人演变为<strong>伊塞尔人</strong>，并进一步分为两支：</p><p>• <strong>向西分支</strong>：约50年后抵达伊塞尔河上游，建立<strong>伊塞尔城</strong>。该城东南北三面环山，形成天然防御屏障，伊塞尔人在此发展出以农业为主的定居文明。</p><p>• <strong>向北分支</strong>：抵达寒冷的<strong>霜狼高原</strong>，开启了长达数百年的流浪生活。在与严酷自然环境的抗争中，他们与当地狼群形成了独特的共生关系，逐渐产生了对<strong>霜狼的信仰</strong>，这种信仰成为他们精神生活的核心。</p><p>伊塞尔人的两支发展路径，体现了同一族群在不同环境压力下的文化适应策略，为后来新川大陆文明的多样性做出了重要贡献。</p><h3 id="2-4-山人的分化与融合">2.4 山人的分化与融合</h3><p><strong>公元前1800年前后</strong>，占据东部肥沃土地的山人逐渐分化为三个支系：<strong>川人</strong>、<strong>海人</strong>和<strong>米亚人</strong>。这三支在发展过程中命运各异：</p><p><strong>海人</strong>因海洋资源有限和环境变化，于<strong>公元前1100年前后</strong>逐渐消亡，其土地被川人兼并。这一事件成为新川大陆文明发展史上第一次记录的民族消亡事件，反映了环境适应对文明存续的重要性。</p><p><strong>公元前1000年前后</strong>，<strong>川人</strong>发起对<strong>米亚人</strong>的兼并战争。战争导致米亚人分化为两支：一支被川人兼并，逐渐演变为<strong>兰川人</strong>；另一支则开始大规模迁徙，史称&quot;米亚远行&quot;，这一迁徙对后来多个文明的发展产生了深远影响。</p><h2 id="第三章：古典农业时期（公元前400年-公元400年）">第三章：古典农业时期（公元前400年-公元400年）</h2><h3 id="3-1-水利技术的传播与文明革新">3.1 水利技术的传播与文明革新</h3><p><strong>公元前800年前后</strong>，远行的米亚人与瓦伦人在裂龙山谷相遇。米亚人带来的先进水利技术与瓦伦人的沙漠生存经验相结合，促成了<strong>拜亚城</strong>的重建。这次重建不仅是城市物理空间的改造，更是一次深刻的文化融合，标志着<strong>瓦伦迪亚文明</strong>的正式形成。</p><p>米亚人带来的水利技术包括：</p><p>• 复杂的引水渠系统设计</p><p>• 水坝和水库的建造技术</p><p>• 农田灌溉的高效分配方法</p><p>这些技术使裂龙山谷的农业产量大幅提高，支持了人口增长和城市扩张，为瓦伦迪亚后来的商业繁荣奠定了物质基础。</p><h3 id="3-2-霜狼高原的文明融合：蒙里米亚的诞生">3.2 霜狼高原的文明融合：蒙里米亚的诞生</h3><p><strong>公元前700年前后</strong>，另一支远行的米亚人抵达<strong>霜狼高原</strong>，与在此流浪数百年的伊塞尔人北迁分支相遇。米亚人带来的水利技术使高原农业成为可能，他们在河流源头建立了<strong>蒙德里城</strong>，标志着<strong>蒙里米亚文明</strong>的诞生。</p><p>蒙里米亚文明的独特之处在于：</p><p>• <strong>霜狼信仰与米亚人宗教观念的融合</strong>：形成了独特的萨满教体系</p><p>• <strong>高原农业技术</strong>：开发出适应高寒环境的作物品种和种植技术</p><p>• <strong>政教合一的社会结构</strong>：宗教领袖同时掌握政治权力</p><p><strong>公元前307年</strong>，在伊塞尔人入侵的压力下，大先知蒙完成了对宗教的系统诠释，确立了以霜狼为核心的神学体系。<strong>公元前110年</strong>，蒙的第十一代孙统一霜狼高原各部，正式建立政教合一的<strong>蒙里米亚</strong>国家，使蒙里米亚成为古典农业时期最具影响力的文明之一。</p><h3 id="3-3-北境的民族融合：斯尔人的崛起">3.3 北境的民族融合：斯尔人的崛起</h3><p><strong>公元前500年前后</strong>，川人内部因生产方式差异发生分裂。从事游牧的一支因与农耕文明的冲突被边缘化，向北迁移。<strong>公元前400年前后</strong>，这支游牧川人与北境的斯特人相遇并逐渐融合，形成了新的民族——<strong>斯尔人</strong>。</p><p>斯尔人继承了：</p><p>• 斯特人的北境适应能力和骑射技术</p><p>• 川人的社会组织能力和军事战略思想</p><p>• 双方的文化传统和宗教信仰</p><p><strong>公元101年</strong>，斯尔人凭借军事优势占领<strong>坤达帖木儿</strong>，建立<strong>斯尔吉亚</strong>政权。斯尔吉亚实行军事贵族制度，形成了少数精英统治多数斯特人的社会结构，这种结构后来成为北境政治的典型模式。</p><h3 id="3-4-伊塞尔文明的动荡与变革">3.4 伊塞尔文明的动荡与变革</h3><p><strong>公元前309年</strong>，伊塞尔人向南扩张，大举进攻霜狼高原的蒙里米亚。然而，不适应高原环境的伊塞尔军队遭遇惨败，这场战争引发了伊塞尔内部的长期混乱。</p><p>战争失败后，伊塞尔社会陷入危机：</p><p>• 军事贵族与传统祭司的权力斗争加剧</p><p>• 资源分配不均引发社会矛盾</p><p>• 外部威胁与内部动荡交织</p><p><strong>公元前307年</strong>，在战争阴影下，大先知蒙完成宗教改革，而伊塞尔内部则出现了<strong>铁器技术</strong>引发的社会变革。铁器的传入改变了战争形态和生产方式，导致旧贵族与新兴军事阶层的冲突。旧贵族虽然在权力斗争中暂时获胜，但社会矛盾的积累为后来的动荡埋下了伏笔。</p><h2 id="第四章：帝国封建时期（公元400年-公元1000年）">第四章：帝国封建时期（公元400年-公元1000年）</h2><h3 id="4-1-双丹的独立与商业文明的兴起">4.1 双丹的独立与商业文明的兴起</h3><p><strong>公元404年</strong>，<strong>切丹</strong>宣布独立，这一事件成为帝国封建时期的开端。切丹家族虽身处川人政权体系，却保留着部分瓦伦人的血脉。他们利用瓦伦迪亚民众的暴乱，扩充私军，最终脱离川人统治，建立独立政权。</p><p>切丹政权的成功得益于：</p><p>• <strong>战略地理位置</strong>：在沿海地区建立双海港（赤丹港和乌丹港）</p><p>• <strong>灵活的外交策略</strong>：利用瓦伦迪亚与川帝国的矛盾，实行中立政策</p><p>切丹家族为避免内战，将双海港分别交给两个儿子治理，形成了赤丹港侧重金属加工业、乌丹港专注奢侈品贸易的分工格局。这种模式不仅促进了经济繁荣，也为后来的联邦制度提供了早期实践经验。</p><h3 id="4-2-瓦伦迪亚的统一与联邦共和制的诞生">4.2 瓦伦迪亚的统一与联邦共和制的诞生</h3><p><strong>公元409年</strong>，受双丹独立的鼓舞，瓦伦迪亚各城邦通过条约完成统一，创立了独特的<strong>联邦共和制</strong>。这一政治制度的创新包括：</p><p>• <strong>城邦代表制度</strong>：各城邦根据人口比例选派代表</p><p>• <strong>议会决策机制</strong>：重要事务由城邦代表组成的议会投票决定</p><p>• <strong>法律面前平等</strong>：确立了超越城邦界限的公民权利</p><p>瓦伦迪亚的统一并非通过军事征服，而是基于共同商业利益的自愿联合。这种和平统一模式在新川大陆文明史上独树一帜，反映了商业文明对政治制度的深刻影响。</p><h3 id="4-3-斯尔吉亚的军事扩张与北境霸权">4.3 斯尔吉亚的军事扩张与北境霸权</h3><p>斯尔吉亚在建立后迅速发展成为北境强国，其成功的关键因素包括：</p><p><strong>军事制度创新</strong>：</p><p>• 建立专业化的骑兵部队，职业军队就此诞生</p><p>• 发展先进的弓箭技术和战术</p><p>• 高效的信仰提供强力的军事动员</p><p><strong>战略资源控制</strong>：</p><p>• 占领万通港口，控制东西贸易的北方海上通道</p><p>• 开发东部草原作为战马繁育基地</p><p>• 建立覆盖北境的军事要塞网络</p><p>斯尔吉亚的军事扩张使其成为强大的军事帝国，其骑兵部队在大陆北部所向披靡，形成了独特的军事文化和贵族统治体系。</p><h3 id="4-4-伊塞尔的统一与现代化">4.4 伊塞尔的统一与现代化</h3><p>在经历了长达数百年的分裂与动荡后，<strong>艾</strong>于公元1世纪末崛起，通过军事征服和外交联盟，重新统一了伊塞尔各割据势力。艾的统一不仅结束了内乱，还：</p><p>• 建立了中央集权的行政体系</p><p>• 改革军事制度，吸收先进战术</p><p>• 发展与周边文明的贸易关系</p><p>艾的统一标志着<strong>现代伊塞尔文明</strong>的确立，使伊塞尔重新成为大陆西部的重要力量。伊塞尔文明在经历长期分裂后，吸收了多元文化元素，形成了独特的社会结构和文化传统。</p><h2 id="第五章：跨文明专题研究">第五章：跨文明专题研究</h2><h3 id="5-1-技术传播与文明互动">5.1 技术传播与文明互动</h3><p>新川大陆文明发展的重要特征是技术的跨文明传播，其中<strong>水利技术</strong>和<strong>金属冶炼技术</strong>的传播最为关键：</p><p><strong>水利技术传播路线</strong>：</p><p>• 起源：米亚人</p><p>• 传播路径：向西传入瓦伦，随后北上穿越沙漠传入霜狼高原和伊塞尔；</p><p>向北被川人吸纳，随后再次向北传入斯尔吉亚。</p><p>• 技术演变：从河流治理到水利灌溉，再到水力工业。</p><p><strong>金属冶炼技术传播</strong>：</p><p>• 起源：川人的善于冶炼的一支</p><p>• 传入路径：自被发现，迅速在川人文化普及，随后向四周辐射，向北进入斯尔吉亚，向西进入伊塞尔，向西南进入瓦伦迪亚。</p><p>• 社会影响：改变军事格局，促成新贵族崛起，引发社会结构变革</p><p>技术传播不仅是工具和方法的转移，更是知识体系和思维方式的交流，促进了各文明的创新与发展。</p><h3 id="5-2-宗教演变与精神文化">5.2 宗教演变与精神文化</h3><p>新川大陆各文明发展出丰富的宗教体系，这些宗教既反映了各民族的生存环境，也塑造了他们的文化特征：</p><p><strong>霜狼信仰</strong>：</p><p>• 起源：伊塞尔人北迁分支在霜狼高原的生存体验</p><p>• 发展：与米亚人宗教观念融合，形成蒙里米亚国教</p><p>• 特征：自然崇拜与祖先崇拜结合，动物图腾（霜狼）为核心象征</p><p><strong>山神信仰</strong>：</p><p>• 起源：斯特人在&quot;神之息&quot;山谷的定居经历</p><p>• 演变：与川人游牧文化融合，形成斯尔吉亚的军事神学</p><p>• 影响：强化了军事贵族的统治合法性</p><p>宗教不仅是精神寄托，也是社会整合的工具，在蒙里米亚的政教合一和斯尔吉亚的军事动员中发挥了关键作用。</p><p>两种信仰均在极度寒冷的自然条件压迫下产生，或许信仰能成为人类在危难面前支撑活下去的精神源泉。</p><h3 id="5-3-政治制度的多样性与创新">5.3 政治制度的多样性与创新</h3><p>帝国封建时期，新川大陆各文明发展出多样化的政治制度，反映了不同的社会结构和文化传统：</p><p><strong>蒙里米亚的政教合一制</strong>：</p><p>• 权力结构：宗教领袖同时担任政治首脑</p><p>• 治理方式：以宗教律法为基础，祭司阶层参与行政管理</p><p>• 优势与局限：强化社会凝聚力，但限制思想创新</p><p><strong>瓦伦迪亚的联邦共和制</strong>：</p><p>• 权力结构：城邦代表组成的议会为最高权力机构</p><p>• 决策机制：多数投票制，城邦享有高度自治权</p><p>• 优势与局限：促进商业发展和文化多元，但决策效率较低</p><p><strong>斯尔吉亚的军事贵族制</strong>：</p><p>• 权力结构：军事精英组成的贵族会议掌握实权</p><p>• 社会流动：基于军功的晋升体系，保持军事活力</p><p>• 优势与局限：形成强大军事力量，但容易引发对外扩张</p><p><strong>双丹的商业寡头制</strong>：</p><p>• 权力结构：富裕商人组成的寡头集团控制政治</p><p>• 治理特点：以商业利益为导向，灵活的外交政策</p><p>• 优势与局限：促进经济繁荣，但可能忽视社会公平</p><p>这些政治制度的多样性反映了新川大陆文明发展的丰富性，也为不同环境下的社会治理提供了多样化的解决方案。</p><h2 id="第六章：文明互动与历史影响">第六章：文明互动与历史影响</h2><h3 id="6-1-贸易网络的构建与文化交流">6.1 贸易网络的构建与文化交流</h3><p><strong>公元500年后</strong>，新川大陆形成了以覆盖多帝国的贸易网络：</p><p><strong>主要贸易路线</strong>：</p><p>• 沙漠商路：自川帝国京师一路向西，穿越沙漠，连接各个大型城市，最终抵达伊塞尔城。这条商路是大陆最重要的陆地贸易。</p><p>• 双丹商路：双丹港口作为贸易基站，东连川帝国东海岸五大港口，西连瓦伦，西门。（西帝国唯一港口，西帝国是川文化的扩张）</p><p>• 北方航道：自万通港至米亚基斯，是东西贸易最为高效的商路。</p><p>• 东部丝绸之路：川帝国盛产的丝绸等奢饰品向北连接斯尔吉亚，进入万通港，向东进入五大港，向西南进入瓦伦，是最重要的奢侈品贸易路线。</p><p>贸易不仅促进了商品流通，也带来了文化交流：</p><p>• 语言的相互影响：各文明词汇的借用与语法结构的趋同</p><p>• 科技知识的传播：农业技术、手工业方法的跨文明交流</p><h3 id="6-2-军事冲突与文明融合">6.2 军事冲突与文明融合</h3><p>军事冲突虽然带来破坏，但也促进了文明间的融合：</p><p>古典时期三大战争</p><p><strong>伊塞尔-蒙里米亚战争（公元前309年）</strong>：</p><p>• 直接结果：伊塞尔失败，蒙里米亚巩固高原统治</p><p>• 长远影响：促进军事技术交流，伊塞尔内乱为艾的统一创造条件</p><p><strong>斯尔吉亚扩张（公元100-200年）</strong>：</p><p>• 军事策略：骑兵部队的灵活运用，要塞体系的建设</p><p>• 文化影响：斯特人与川人文化的深度融合，形成新的文化认同</p><p>• 长远影响：夺取万通港，占据东部大草原，为斯尔吉亚的强盛奠定基础</p><p><strong>双丹独立战争（公元404年）</strong>：</p><p>• 政治影响：打破川人霸权，开启联邦共和实验</p><p>• 经济影响：促进商业网络形成，改变大陆权力格局</p><h3 id="6-3-主要文明的历史地位与贡献">6.3 主要文明的历史地位与贡献</h3><p><strong>蒙里米亚文明</strong>：</p><p>• 独特贡献：政教合一制度的实践，高原农业技术的创新</p><p>• 文化遗产：丰富的宗教典籍，独特的艺术风格，水利工程技术</p><p><strong>瓦伦迪亚文明</strong>：</p><p>• 独特贡献：联邦共和制度的早期实践，商业文化的发展</p><p>• 文化遗产：法律体系，商业契约传统，城市规划理念</p><p><strong>斯尔吉亚文明</strong>：</p><p>• 独特贡献：骑兵战术的革新，游牧与农耕文化的融合</p><p>• 文化遗产：军事训练体系，马术技术，多元文化融合模式</p><p><strong>双丹文明</strong>：</p><p>• 独特贡献：商业网络的构建，城邦联盟的治理经验</p><p>• 文化遗产：航海技术，金融制度，国际贸易规范</p><p><strong>伊塞尔文明</strong>：</p><p>• 独特贡献：在分裂与统一中探索社会整合的路径</p><p>• 文化遗产：铁器制造技术，行政管理体系，文学传统</p><h2 id="第七章：终论">第七章：终论</h2><p>新川大陆的文明发展史是一部多元文化互动、冲突与融合的史诗。从远古时期山人与林人的分化，到古典农业时期的技术传播，再到帝国封建时期的政治创新，各文明在适应环境、应对挑战的过程中，发展出独特的文化特征和社会结构。</p><p>蒙里米亚的宗教整合、瓦伦迪亚的商业智慧、斯尔吉亚的军事创新、双丹的贸易网络、伊塞尔的社会变革，共同构成了新川大陆文明的丰富图景。这些文明虽然发展路径各异，但都对大陆的整体发展做出了独特贡献。</p><p>新川大陆文明发展的历史启示：</p><p>1. 环境适应是文明存续的基础，各文明都发展出适应特定环境的生存策略</p><p>2. 技术创新和传播是文明进步的关键驱动力</p><p>3. 文化融合能够创造新的文明形态，增强社会活力</p><p>4. 政治制度的多样性反映了不同社会结构的适应性需求</p><p>5. 贸易网络的构建促进了物质与文化的交流，推动整体发展</p><p>新川大陆的文明发展史表明，文明的进步不是单一模式的复制，而是多元文化在互动中共同演进的过程。这种多元一体的发展模式，为理解人类文明的多样性和统一性提供了重要视角。</p><h2 id="附录：新川大陆文明年表">附录：新川大陆文明年表</h2><p>• <strong>公元前2000年</strong>：山人与林人爆发争斗，林人被迫迁徙</p><p>• <strong>公元前1800年</strong>：山人分化为川人、海人、米亚人</p><p>• <strong>公元前1700年</strong>：斯特人建立坤达帖木儿，北境文明诞生</p><p>• <strong>公元前1600年</strong>：瓦伦人建立拜亚城，西南文明奠基</p><p>• <strong>公元前1400年</strong>：伊塞尔人分化，西支建立伊塞尔城</p><p>• <strong>公元前1100年</strong>：海人消亡，土地被川人兼并</p><p>• <strong>公元前1000年</strong>：川人兼并米亚人，引发米亚远行</p><p>• <strong>公元前800年</strong>：米亚人与瓦伦人融合，瓦伦迪亚文明形成</p><p>• <strong>公元前700年</strong>：米亚人抵达霜狼高原，蒙里米亚文明萌芽</p><p>• <strong>公元前500年</strong>：川人与兰川人融合，形成新川人</p><p>• <strong>公元前400年</strong>：川人游牧分支与斯特人融合，形成斯尔人</p><p>• <strong>公元前309年</strong>：伊塞尔进攻霜狼高原失败，陷入内乱</p><p>• <strong>公元前307年</strong>：大先知蒙完成宗教改革</p><p>• <strong>公元前110年</strong>：蒙里米亚完成政教合一</p><p>• <strong>公元前77年左右</strong>：艾统一伊塞尔，伊塞尔文明确立</p><p>• <strong>公元101年</strong>：斯尔人占领坤达帖木儿，建立斯尔吉亚</p><p>• <strong>公元404年</strong>：切丹独立，双丹文明兴起</p><p>• <strong>公元409年</strong>：瓦伦迪亚完成统一，联邦共和制确立</p><p>• <strong>公元500年后</strong>：新川大陆跨文明贸易网络形成</p>]]></content:encoded>
      
      
      <category domain="https://samuflore.top/categories/%E8%BD%89%E8%BC%89/">轉載</category>
      
      
      <category domain="https://samuflore.top/tags/History/">History</category>
      
      <category domain="https://samuflore.top/tags/Repost/">Repost</category>
      
      
      <comments>https://samuflore.top/posts/10425c0c/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
